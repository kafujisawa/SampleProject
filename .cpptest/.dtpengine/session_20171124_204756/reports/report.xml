<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2017-11-24" climode="true" execEnv="win32_x86_64" hasViols="true" id="1509840782374" lang="ja_JP" machine="TP-I5600-17" prjModule="calcurator" project="" tag="calcurator-静的" time="2017-11-24T20:48:09+09:00" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="10.3.3" user="fujisawa">
   <TestConfig machine="TP-I5600-17" name="MISRA C 2012" pseudoUrl="C:\Program Files (x86)\Jenkins\workspace\gitSample\SampleProject\calcurator\testconfig\MISRA C 2012.properties" user="fujisawa" />
   <Authors>
      <Author id="dev1" name="fujisawa" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.3.3" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.desktop.files.in.scope" name="Helper Scope Analyzer for C++test Desktop" ver="10.3.3" />
      <Analyzer id="xtest" name="Scope Analyzer" ver="1" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.3.3" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.3.3" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.3.3" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="fujisawa" hash="1567418237" locRef="1" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/calc.c" totLns="98" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/calc.c" />
         <Loc auth="fujisawa" hash="873799153" locRef="2" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/calculator.c" totLns="27" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/calculator.c" />
         <Loc auth="fujisawa" hash="1360408807" locRef="3" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/format.c" totLns="208" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/format.c" />
         <Loc auth="fujisawa" hash="-1632907632" locRef="4" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/viewer.c" totLns="25" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/viewer.c" />
         <Loc auth="fujisawa" hash="-1046831345" locRef="5" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/calc.h" totLns="17" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/calc.h" />
         <Loc auth="fujisawa" hash="9282268" locRef="6" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/viewer.h" totLns="16" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/viewer.h" />
         <Loc auth="fujisawa" hash="-2008126451" locRef="7" projId="calcurator" projPath="/calcurator" project="calcurator" resProjPath="calculator/src/format.h" totLns="18" uri="file://TP-I5600-17/C:/Program%20Files%20(x86)/Jenkins/workspace/gitSample/SampleProject/calcurator/calculator/src/format.h" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:45">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="7" checkedLns="409" name="calcurator" qfixErrs="0" suppErrs="0" totErrs="244" totFiles="7" totLns="409" />
      </Projects>
      
  <FADetails>
    <HtmlDump dumpId="1" value=".C   calc.c (9): int calc(char *repolish,int *calculationResult) {&#xd;&#xa;.    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;!    calc.c (11): double stack[256];&#xd;&#xa;.    calc.c (12): int stackindex = 0;&#xd;&#xa;.    calc.c (13): int cnt;&#xd;&#xa;.    calc.c (14): int tmp = 0;&#xd;&#xa;.    calc.c (15): double overflow_check;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.P   calc.c (44): if(stack[stackindex - 2] + stack[stackindex - 1] &amp;gt; INT_MAX){" />
    <HtmlDump dumpId="2" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (44): if(stack[stackindex - 2] + stack[stackindex - 1] &amp;gt; INT_MAX){ // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="3" value=".C   calc.c (9): int calc(char *repolish,int *calculationResult) {&#xd;&#xa;.    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;!    calc.c (11): double stack[256];&#xd;&#xa;.    calc.c (12): int stackindex = 0;&#xd;&#xa;.    calc.c (13): int cnt;&#xd;&#xa;.    calc.c (14): int tmp = 0;&#xd;&#xa;.    calc.c (15): double overflow_check;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.P   calc.c (44): if(stack[stackindex - 2] + stack[stackindex - 1] &amp;gt; INT_MAX){" />
    <HtmlDump dumpId="4" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (44): if(stack[stackindex - 2] + stack[stackindex - 1] &amp;gt; INT_MAX){ // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="5" value=".C   calc.c (9): int calc(char *repolish,int *calculationResult) {&#xd;&#xa;.    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;!    calc.c (11): double stack[256];&#xd;&#xa;.    calc.c (12): int stackindex = 0;&#xd;&#xa;.    calc.c (13): int cnt;&#xd;&#xa;.    calc.c (14): int tmp = 0;&#xd;&#xa;.    calc.c (15): double overflow_check;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.    calc.c (78): if(stack[stackindex - 1] == 0){&#xd;&#xa;.    calc.c (82): stack[stackindex - 2] = stack[stackindex - 2] / stack[stackindex - 1];&#xd;&#xa;.    calc.c (83): stackindex--;&#xd;&#xa;.    calc.c (84): break;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.P   calc.c (55): if(stack[stackindex - 2] - stack[stackindex - 1] &amp;lt; INT_MIN){" />
    <HtmlDump dumpId="6" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (55): if(stack[stackindex - 2] - stack[stackindex - 1] &amp;lt; INT_MIN){ // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="7" value=".C   calc.c (9): int calc(char *repolish,int *calculationResult) {&#xd;&#xa;.    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;!    calc.c (11): double stack[256];&#xd;&#xa;.    calc.c (12): int stackindex = 0;&#xd;&#xa;.    calc.c (13): int cnt;&#xd;&#xa;.    calc.c (14): int tmp = 0;&#xd;&#xa;.    calc.c (15): double overflow_check;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.    calc.c (78): if(stack[stackindex - 1] == 0){&#xd;&#xa;.    calc.c (82): stack[stackindex - 2] = stack[stackindex - 2] / stack[stackindex - 1];&#xd;&#xa;.    calc.c (83): stackindex--;&#xd;&#xa;.    calc.c (84): break;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.P   calc.c (55): if(stack[stackindex - 2] - stack[stackindex - 1] &amp;lt; INT_MIN){" />
    <HtmlDump dumpId="8" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (55): if(stack[stackindex - 2] - stack[stackindex - 1] &amp;lt; INT_MIN){ // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="9" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (64): overflow_check = stack[stackindex - 2] * stack[stackindex - 1]; // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="10" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (64): overflow_check = stack[stackindex - 2] * stack[stackindex - 1]; // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="11" value=".C   calc.c (9): int calc(char *repolish,int *calculationResult) {&#xd;&#xa;.    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;!    calc.c (11): double stack[256];&#xd;&#xa;.    calc.c (12): int stackindex = 0;&#xd;&#xa;.    calc.c (13): int cnt;&#xd;&#xa;.    calc.c (14): int tmp = 0;&#xd;&#xa;.    calc.c (15): double overflow_check;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.P   calc.c (78): if(stack[stackindex - 1] == 0){" />
    <HtmlDump dumpId="12" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (78): if(stack[stackindex - 1] == 0){ // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="13" value=".C   calc.c (9): int calc(char *repolish,int *calculationResult) {&#xd;&#xa;.    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;!    calc.c (11): double stack[256];&#xd;&#xa;.    calc.c (12): int stackindex = 0;&#xd;&#xa;.    calc.c (13): int cnt;&#xd;&#xa;.    calc.c (14): int tmp = 0;&#xd;&#xa;.    calc.c (15): double overflow_check;&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) {&#xd;&#xa;.P   calc.c (78): if(stack[stackindex - 1] == 0){" />
    <HtmlDump dumpId="14" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (17): switch (*(repolish + cnt)) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (78): if(stack[stackindex - 1] == 0){ // 初期化されていない値: stack[]" />
    <HtmlDump dumpId="15" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;!    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (89): if (stack[0] &amp;gt; 0){ // 初期化されていない値: stack[0]" />
    <HtmlDump dumpId="16" value=".    calc.c (10): printf(&quot;%s\n&quot;,repolish);&#xd;&#xa;.C   calc.c (11): double stack[256]; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (12): int stackindex = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (13): int cnt; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (14): int tmp = 0; // 初期化されていない値: stack[]&#xd;&#xa;.    calc.c (15): double overflow_check; // 初期化されていない値: stack[]&#xd;&#xa;!    calc.c (16): for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) { // 初期化されていない値: stack[]&#xd;&#xa;.P   calc.c (89): if (stack[0] &amp;gt; 0){ // 初期化されていない値: stack[0]" />
    <HtmlDump dumpId="17" value=".    calculator.c (18): char str1[256];//とりあえず256あればいっか。&#xd;&#xa;.    calculator.c (19): int result;&#xd;&#xa;.    calculator.c (20): char str2[256];&#xd;&#xa;!    calculator.c (21): inputconsole(str1);&#xd;&#xa;.C      viewer.c (13): fgets(str2,256,stdin); // 汚染されたデータ: str2[&amp;lt;インデックス&amp;gt;]&#xd;&#xa;!    calculator.c (22): createOutputStatement(str1,str2); // 汚染されたデータ: str1[&amp;lt;インデックス&amp;gt;]&#xd;&#xa;.       format.c (172): int errorflg = 0; // 汚染されたデータ: instr[&amp;lt;インデックス&amp;gt;]&#xd;&#xa;.       format.c (173): int result; // 汚染されたデータ: instr[&amp;lt;インデックス&amp;gt;]&#xd;&#xa;.       format.c (174): char repolish[256]; // 汚染されたデータ: instr[&amp;lt;インデックス&amp;gt;]&#xd;&#xa;!       format.c (175): errorflg = strlenCheck(instr); // 汚染されたデータ: instr[&amp;lt;インデックス&amp;gt;]&#xd;&#xa;.P         format.c (10): printf(&quot;%s\n&quot;,instr); // 汚染されたデータ: instr[&amp;lt;インデックス&amp;gt;]" />
    <HtmlDump dumpId="18" value=".C   format.c (37): int reversePolish(char* ptr,char outstr[256]){&#xd;&#xa;!    format.c (38): char opstack[256];&#xd;&#xa;.    format.c (40): int opindex = 0;&#xd;&#xa;.    format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;&#xd;&#xa;.    format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {&#xd;&#xa;.    format.c (43): switch(*(ptr + cnt)){&#xd;&#xa;.    format.c (100): numflg = 0;&#xd;&#xa;.    format.c (101): opcnt++;&#xd;&#xa;.P   format.c (102): if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){" />
    <HtmlDump dumpId="19" value=".C   format.c (38): char opstack[256]; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (40): int opindex = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (100): numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (101): opcnt++; // 初期化されていない値: opstack[]&#xd;&#xa;.P   format.c (102): if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){ // 初期化されていない値: opstack[]" />
    <HtmlDump dumpId="20" value=".C   format.c (37): int reversePolish(char* ptr,char outstr[256]){&#xd;&#xa;!    format.c (38): char opstack[256];&#xd;&#xa;.    format.c (40): int opindex = 0;&#xd;&#xa;.    format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;&#xd;&#xa;.    format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {&#xd;&#xa;.    format.c (43): switch(*(ptr + cnt)){&#xd;&#xa;.    format.c (100): numflg = 0;&#xd;&#xa;.    format.c (101): opcnt++;&#xd;&#xa;.P   format.c (102): if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){" />
    <HtmlDump dumpId="21" value=".C   format.c (38): char opstack[256]; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (40): int opindex = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (100): numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (101): opcnt++; // 初期化されていない値: opstack[]&#xd;&#xa;.P   format.c (102): if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){ // 初期化されていない値: opstack[]" />
    <HtmlDump dumpId="22" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (114): numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (115): if (*(ptr + cnt + 1) == '+' || *(ptr + cnt + 1) == '-' || *(ptr + cnt + 1) == '*'|| *(ptr + cnt + 1) == '/'){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (116): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="23" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (114): numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (115): if (*(ptr + cnt + 1) == '+' || *(ptr + cnt + 1) == '-' || *(ptr + cnt + 1) == '*'|| *(ptr + cnt + 1) == '/'){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (116): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="24" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (123): numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (124): if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (125): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="25" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (123): numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (124): if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (125): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="26" value=".C   format.c (38): char opstack[256]; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (40): int opindex = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (123): numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (124): if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){ // 初期化されていない値: opstack[]&#xd;&#xa;.P   format.c (128): while(opstack[opindex -1] != '('){ // 初期化されていない値: opstack[]" />
    <HtmlDump dumpId="27" value=".C   format.c (38): char opstack[256]; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (40): int opindex = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (123): numflg = 0; // 初期化されていない値: opstack[]&#xd;&#xa;.    format.c (124): if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){ // 初期化されていない値: opstack[]&#xd;&#xa;.P   format.c (128): while(opstack[opindex -1] != '('){ // 初期化されていない値: opstack[]" />
    <HtmlDump dumpId="28" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (123): numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (124): if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (128): while(opstack[opindex -1] != '('){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (129): if(opindex &amp;lt;= 1){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (130): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="29" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (43): switch(*(ptr + cnt)){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (123): numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (124): if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (128): while(opstack[opindex -1] != '('){ // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (129): if(opindex &amp;lt;= 1){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (130): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="30" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (145): if(numcnt != opcnt + 1){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (146): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="31" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 非ゼロ終端文字列: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (145): if(numcnt != opcnt + 1){ // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.P      format.c (146): strlen(...) // 非ゼロ終端文字列: outstr[]" />
    <HtmlDump dumpId="32" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 非ゼロ終端文字列: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 非ゼロ終端文字列: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.       format.c (145): if(numcnt != opcnt + 1){ // 非ゼロ終端文字列: outstr[]&#xd;&#xa;.P      format.c (146): strlen(...) // 非ゼロ終端文字列: outstr[]" />
    <HtmlDump dumpId="33" value=".    format.c (172): int errorflg = 0;&#xd;&#xa;.    format.c (173): int result;&#xd;&#xa;.C   format.c (174): char repolish[256]; // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (175): errorflg = strlenCheck(instr); // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (176): if(errorflg){ // 初期化されていない値: repolish[]&#xd;&#xa;.    format.c (185): }else if(formatCheck(instr)){ // 初期化されていない値: repolish[]&#xd;&#xa;!    format.c (188): reversePolish(...) // 初期化されていない値: repolish[]&#xd;&#xa;.       format.c (38): char opstack[256]; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (40): int opindex = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (41): int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0; // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (42): for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) { // 初期化されていない値: outstr[]&#xd;&#xa;.       format.c (145): if(numcnt != opcnt + 1){ // 初期化されていない値: outstr[]&#xd;&#xa;.P      format.c (146): strlen(...) // 初期化されていない値: outstr[]" />
    <HtmlDump dumpId="34" value="CP   viewer.c (13): fgets(str2,256,stdin);" />
  </FADetails>

      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="フロー解析" name="BD" rules="82" total="0">
               <Category authTot="0;" authUrg="0;" desc="誤った API の使用" name="BD-API" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="その他" name="BD-MISC" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="バグの可能性" name="BD-PB" rules="41" total="0" />
               <Category authTot="0;" authUrg="0;" desc="リソース" name="BD-RES" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="セキュリティ" name="BD-SECURITY" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="コンテナー" name="BD-CO" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="スレッドと同期化" name="BD-TRS" rules="13" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="重複コードの検出" name="CDD" rules="4" total="0" />
            <Category authTot="0;" authUrg="0;" desc="コーディング規約" name="CODSTA" rules="340" total="0">
               <Category authTot="0;" authUrg="0;" desc="C++ コーディング規約" name="CODSTA-CPP" rules="91" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Modern C++ コーディング規約" name="CODSTA-MCPP" rules="26" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="コメント" name="COMMENT" rules="13" total="0" />
            <Category authTot="0;" authUrg="0;" desc="例外" name="EXCEPT" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="書式" name="FORMAT" rules="47" total="0" />
            <Category authTot="0;" authUrg="0;" desc="グローバル静的解析" name="GLOBAL" rules="13" total="0" />
            <Category authTot="0;" authUrg="0;" desc="初期化" name="INIT" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Joint Strike Fighter" name="JSF" rules="270" total="0" />
            <Category authTot="0;" authUrg="0;" desc="メトリクス" name="METRIC" rules="49" total="0" />
            <Category authTot="0;" authUrg="0;" desc="メトリクス" name="METRICS" rules="43" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C" name="MISRA" rules="60" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2004" name="MISRA2004" rules="216" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C++ 2008" name="MISRA2008" rules="281" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRA2012" rules="326" total="0">
               <Category authTot="202;" authUrg="37;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="286" total="202" />
               <Category authTot="42;" authUrg="13;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="40" total="42" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="メモリおよびリソース管理" name="MRM" rules="53" total="0" />
            <Category authTot="0;" authUrg="0;" desc="名前付け規則" name="NAMING" rules="94" total="0">
               <Category authTot="0;" authUrg="0;" desc="ハンガリー記法" name="NAMING-HN" rules="44" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="オブジェクト指向" name="OOP" rules="56" total="0" />
            <Category authTot="0;" authUrg="0;" desc="最適化" name="OPT" rules="41" total="0" />
            <Category authTot="0;" authUrg="0;" desc="パーサー診断法" name="PARSER" rules="2" total="0" />
            <Category authTot="0;" authUrg="0;" desc="バグの可能性" name="PB" rules="72" total="0" />
            <Category authTot="0;" authUrg="0;" desc="物理ファイル編成" name="PFO" rules="9" total="0" />
            <Category authTot="0;" authUrg="0;" desc="移植性" name="PORT" rules="26" total="0" />
            <Category authTot="0;" authUrg="0;" desc="プリプロセッサ" name="PREPROC" rules="19" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Qt ベスト プラクティス" name="QT" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="セキュリティ" name="SECURITY" rules="49" total="0" />
            <Category authTot="0;" authUrg="0;" desc="STL ベスト プラクティス" name="STL" rules="42" total="0" />
            <Category authTot="0;" authUrg="0;" desc="テンプレート" name="TEMPL" rules="12" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="ヘッダー ファイルの内容が 2 回以上インクルードされるのを防止するための予防措置を取るべきである" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="ライブラリ関数に渡される値を検証する" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="動的なメモリの割り当ては、用いてはならない" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="汚染されたデータを配列添え字として使用しない" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="汚染されたデータによる整数オーバーフロー/アンダーフローを防ぐ" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="汚染されたデータによるバッファー読み込み時のオーバーフローを避ける" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="汚染されたデータによるバッファー書き込み時のオーバーフローを避ける" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="コマンド インジェクションから防御する" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="ファイル名インジェクションから防御する" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="SQL インジェクションから防御する" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="汚染されたデータによるバッファー オーバーフローを避ける" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="不正な書式制限の定義によるバッファー オーバーフローを避ける" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="環境変数インジェクションから防御する" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="汚染されたデータを出力コンソールに出力してはならない" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="MISRA2012-DIR" desc="配列の境界を超えてアクセスしてはならない" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="null ポインターの間接参照を避ける" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="ゼロによる除算を避ける" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="不正な書式指定子によるバッファー オーバーフローを避ける" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="ゼロで終わっていない文字列の読み込みによるオーバーフローを避ける" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="null チェックの前に間接参照しない" id="MISRA2012-DIR-4_1_f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="バッファー読み込み時のオーバーフローを避ける" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="バッファー書き込み時のオーバーフローを避ける" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="ポインタ算術は配列または配列要素を指すポインタにのみ適用する" id="MISRA2012-DIR-4_1_i" origId="MISRA2004-17_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc=">、>=、&lt;、&lt;= は、同じ配列を扱う場合を除き、ポインタ型に適用してはならない" id="MISRA2012-DIR-4_1_j" origId="MISRA2004-17_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="アセンブリ言語は、カプセル化して分離しなければならない" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="非 void 関数の戻り値をチェックする" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="常に非 void 関数の戻り値をチェックする" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="標準ライブラリ関数を使用して動的に取得したすべてのリソースは明示的に解放する必要がある" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="解放されたリソースを使用してはならない" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="無効なポインタを使用してリソースを解放してはならない" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="解放されていないロックを放棄してはならない" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="二重ロックを避ける" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="アセンブラの使用をすべて文書化する" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="3;" cat="MISRA2012-DIR" desc="コード セクションを &quot;コメント アウト&quot; してはならない" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="同じ名前空間にあり可視性が重なる識別子は見た目で明確に区別できなければならない" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="基本型を指す typedef の名前は数字を含むべきである" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="10;" cat="MISRA2012-DIR" desc="基本型の代わりに typedef を使用するべきである" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="C99 規格のコードでは、独自の typedef を宣言する代わりに stdint.h の typedef を使用する" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="構造体または共用体を指すポインターが翻訳単位内で 1 回も間接参照されない場合、オブジェクトの実装を隠すべきである" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="関数マクロよりも関数を用いるべきである" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="sizeof 演算子のオペランドは「配列型」として宣言された関数のパラメーターであってはならない" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="sizeof 演算子のオペランドに副作用を持つ可能性がある式が含まれていてはならない" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="sizeof 演算子のオペランドに副作用を持つ可能性がある式が含まれていてはならない" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="sizeof 演算子のオペランドに副作用を持つ可能性がある式が含まれていてはならない" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数を暗黙的に宣言してはならない" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="戻り値の型が非 void の関数の場合、すべての出口で、式を持つ明示的な return 文を記述しなければならない" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="配列パラメーターの宣言の [ ] の中に static キーワードが含まれていてはならない" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトを重複するオブジェクトに代入またはコピーしてはならない" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトを重複するオブジェクトに代入またはコピーしてはならない" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;ctype.h> ライブラリの関数に渡される値は 'unsigned char' として表現できる値または 'EOF' でなければならない" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="ゼロで終わっていない文字列の読み込みによるオーバーフローを避ける" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="バッファー書き込み時のオーバーフローを避ける" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="string.h の関数に渡される size_t 引数には適切な値がなければならない" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリ関数 localeconv、getenv、setlocale または strerror から返されたポインターは、const 修飾された型へのポインターとしてだけ使用する" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="lconv 構造体のメンバーによって指し示される文字列を変更してはならない" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="特定の標準ライブライ関数から返されたポインターは、そのあとの同じ関数または関連する関数の呼び出しで使用してはならない" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="解放されたリソースを使用してはならない" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="無効なポインタを使用してリソースを解放してはならない" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="読み取り専用として開かれたストリームへの書き込みを避ける" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="FILE オブジェクトへのポインターを間接参照してはいけない" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="FILE オブジェクトへのポインターをライブラリ関数から間接参照してはいけない" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="FILE を指すポインターの値は、関連付けられたストリームが閉じられた後に使用してはならない" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="11;" authUrg="0;" cat="MISRA2012-RULE" desc="初期化の前に使用しない" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オペランドがブール値として解釈される場合、常に実質的なブール型の式を使用するべきである" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オペランドが数値として解釈される場合、実質的なブール型のオペランドを使用するべきではない" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オペランドが数値として解釈される場合、実質的な文字型のオペランドを使用するべきではない" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="算術演算では実質的な列挙型のオペランドを使用するべきではない" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="実質的な signed 型または列挙型のオペランドに対してシフトおよびビット演算を行うべきではない" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ビット シフト演算の右辺のオペランドとして実質的な signed 型または列挙型のオペランドを使用するべきではない" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="単項マイナス演算子のオペランドとして実質的な unsigned 型のオペランドを使用するべきではない" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="実質的な文字型の式を加算または減算演算で不適切に使用するべきではない" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="式の値をより小さい実質的な型を持つオブジェクトに代入してはならない" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="1;" cat="MISRA2012-RULE" desc="式の値を実質的な型カテゴリが異なるオブジェクトに代入してはならない" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="7;" cat="MISRA2012-RULE" desc="通常の算術変換が行われる演算子の 2 つのオペランドは、同じ実質的な型カテゴリでなければならない" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="3 項演算子の 2 番目および 3 番目のオペランドは同じ実質的な型カテゴリでなければならない" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="複合式の値をより大きい実質的な型を持つオブジェクトに代入してはならない" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="通常の数値変換が行われる演算子のオペランドの 1 つとして複合式が使用される場合、他方のオペランドはより大きい実質的な型を持つ型であってはならない" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="通常の数値変換が行われる演算子の (2 つ目または 3 つ目の) オペランドとして複合式が使用される場合、他のオペランドはより大きい実質的な型を持つ型であってはならない" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="複合式の値を別の実質的な型カテゴリまたはより大きい実質的な型にキャストしてはならない" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数へのポインターとそれ以外の型との間で変換を行ってはならない" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数へのポインターとそれ以外の型との間で変換を行ってはならない" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="不完全型へのポインターと他の型との間で変換を行ってはならない" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクト型へのポインターと別のオブジェクト型へのポインターとの間で変換を行ってはならない" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="void へのポインターと数値型との間でキャストしてはならない" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトへのポインターと非整数数値型との間でキャストしてはならない" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ポインタで指し示された型から const 修飾や volatile 修飾を取り除くキャストを行ってはならない" id="MISRA2012-RULE-11_8" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの NULL は、整数 null ポインター定数の唯一許可された形式でなければならない" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの NULL は、整数 null ポインター定数の唯一許可された形式でなければならない" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="シフト演算子の右辺のオペランドとして使用される定数はゼロから左辺の演算子の実質的な型のビット数マイナス 1 の範囲でなければならない" id="MISRA2012-RULE-12_2" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="初期化リストに永続的な副作用が含まれていてはならない" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="式の値は、規格が認めるどのような順序で評価されようとも、同じでなければならない" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数の引数の評価順序に依存するコードを書いてはならない" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数呼び出しおよび関数引数の評価順序に依存するコードを記述してはならない" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数呼び出しを含む式の評価順序に依存するコードを書いてはならない" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトは、シーケンス ポイントの間で、格納された値が式の評価によって 2 回以上変更されてはならない" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="1 つの式で複数の volatile を使用してはならない" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数呼び出しの評価順序に依存するコードを書いてはならない" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="論理演算子 &amp;&amp; または || の右側のオペランドには、永続的な副作用があってはならない" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="for ループのカウンターは、実質的な浮動小数点型であってはならない" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="while および do-while ループのカウンターは、実質的な浮動小数点型であってはならない" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRA2012-RULE" desc="for ループにはループ カウンターが 1 つだけあること、またループ カウンターが for ループ本文で変更されてはならない" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="for ループの最初の句は整形式でなければならない" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRA2012-RULE" desc="for ループの 2 番目の句は整形式でなければならない" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRA2012-RULE" desc="for ループの 3 番目の句は整形式でなければならない" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_a" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_b" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_c" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_d" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_e" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_f" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_g" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_h" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_i" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_j" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_k" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_l" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_m" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_n" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_o" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_p" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_q" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_r" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_s" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_t" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_u" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_v" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_w" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_x" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_y" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_z" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_za" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_zb" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="制御式が不変であってはならない" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="到達できないブランチのある switch 文を避ける" id="MISRA2012-RULE-14_3_zd" origId="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2012-RULE" desc="if 文の制御式と反復文の制御式は本質的にブール型でなければならない" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="goto 文は同じ関数ボディ内の後の部分に宣言されたラベルにジャンプしなければならない" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="goto 文によって参照されるラベルは、同じブロックまたは goto 文を含む外側のブロックで宣言されなければならない" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="switch、while、do...while 、for 文の本体を構成する文は、複合文でなければならない" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="反復文または条件文の本体は複合文でなければならない" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="すべてのif...else if 構文は、else 節で終了しなければならない" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 文には switch ラベルと switch 節のみ使用し、他のコードを入れるべきではない" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch ラベルは、それを直接内包している複合文が switch 文の本文である場合にだけ用いなければならない" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="空でない case 節は、無条件 break 文で終了しなければならない" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="空でない default 節は、無条件 break 文で終了しなければならない" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="必ず switch 文にデフォルト ブランチを用意する" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="MISRA2012-RULE" desc="default ラベルの終了の break の前に 文またはコメントがなければならない" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="'default' は最初の switch ラベルか最後の switch ラベルでなければならない" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 文には少なくとも 2 個の switch 句がなければならない" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch ラベルは、それを直接内包している複合文が switch 文の本文である場合にだけ用いなければならない" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="空でない case 節は、無条件 break 文で終了しなければならない" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="空でない default 節は、無条件 break 文で終了しなければならない" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 文には default ラベルがなければならない" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="MISRA2012-RULE" desc="default ラベルの終了の break の前に 文またはコメントがなければならない" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="default は最初の switch ラベルか最後の switch ラベルでなければならない" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 文には少なくとも 2 個の switch 句がなければならない" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 式では、実質的なブール型になる値を用いてはならない" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 文では、実質的なブール型になる値を用いてはならない" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;stdarg.h> の機能を使用してはならない" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;stdarg.h> の機能を使用してはならない" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数は、直接的か間接的かにかかわらず、その関数自身を呼び出してはならない" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="2;" cat="MISRA2012-RULE" desc="戻り型が void ではない関数によって返却される値を使用しなければならない" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="20" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="戻り型が void ではない関数によって返却される値を使用しなければならない" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="0;" cat="MISRA2012-RULE" desc="配列の境界を超えてアクセスしてはならない" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="範囲外の配列およびポインターへのアクセスを避ける" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ポインタ間の減算は同じ配列の要素を指すポインタにのみ適用する" id="MISRA2012-RULE-18_2" origId="MISRA2004-17_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= は同じ配列の要素を指すポインタにのみ適用する" id="MISRA2012-RULE-18_3" origId="MISRA2004-17_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="自動記憶域のオブジェクトのアドレスを関数から返してはいけない" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="自動記憶域のオブジェクトのアドレスを、オブジェクトが存在しなくなった後にも存在し続ける可能性がある別のオブジェクトに代入してはならない" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="フレキシブル配列メンバーを宣言してはいけない" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="可変長配列を使用してはいけない" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="プログラムは規格によって定められた翻訳限界を超えてはならない (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="プログラムは規格によって定められた翻訳限界を超えてはならない (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="プログラムは規格によって定められた翻訳限界を超えてはならない (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="プログラムは規格によって定められた翻訳限界を超えてはならない (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ゼロによる除算を避ける" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="11;" authUrg="0;" cat="MISRA2012-RULE" desc="初期化の前に使用しない" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="解放されたリソースを使用してはならない" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="バッファー読み込み時のオーバーフローを避ける" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="バッファー書き込み時のオーバーフローを避ける" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="式の値は、規格が認めるどのような順序で評価されようとも、同じでなければならない" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数の引数の評価順序に依存するコードを書いてはならない" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数呼び出しおよび関数引数の評価順序に依存するコードを記述してはならない" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数呼び出しを含む式の評価順序に依存するコードを書いてはならない" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトは、シーケンス ポイントの間で、格納された値が式の評価によって 2 回以上変更されてはならない" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="1 つの式で複数の volatile を使用してはならない" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数呼び出しの評価順序に依存するコードを書いてはならない" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数は非 static ローカル オブジェクトへのポインターまたは参照を返してはならない" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="自動記憶域のオブジェクトのアドレスを、オブジェクトが存在しなくなった後にも存在し続ける可能性がある別のオブジェクトに代入してはならない" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="右シフト演算の左辺のオペランドは負数であってはならない" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="# 演算子があるマクロ パラメーターは、直前、直後に ## 演算子があってはいけない" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="# または ## 演算子のオペランドとして使用されており、それ自体がマクロ置換の対象であるマクロ パラメーターは、それらの演算子のオペランドとしてだけ使用されなければならない" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2012-RULE" desc="最初のトークンが # の行は、有効な前処理指令でなければならない" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="すべての #else、#elif、#endif 前処理指令は、それに関連する #if 指令または #ifdef 指令と同じファイル内に存在しなければならない" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="文字 '、&amp;、\ および文字列 /*、// をヘッダー ファイル名で使用してはならない" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="文字 '、&amp;、\ および文字列 /*、// をヘッダー ファイル名で使用してはならない" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include 指令の後には &lt;filename> または &quot;filename&quot; が続かなければならない" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="キーワードと同じ名前を持つマクロを定義してはならない" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="キーワードと同じ名前を持つマクロを定義してはならない" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数形式マクロの引数には、前処理指令のような字句を記述してはならない" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロ パラメーターの展開結果の式は括弧で囲まれていなければならない" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#if または #elif プリプロセッサ ディレクティブの制御式は 0 または 1 に評価されなければならない" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#if または #elif 前処理指令の制御式で使用されるすべての識別子は評価の前に定義されていなければならない" id="MISRA2012-RULE-20_9_a" origId="MISRA2004-19_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#if または #elif 前処理指令の制御式で使用されるすべての識別子は評価の前に定義されていなければならない" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリの日付と時刻の関数を使用しないようにする" id="MISRA2012-RULE-21_10" origId="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ヘッダー ファイル &lt;tgmath.h> を使用してはいけない" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリ関数 memcmp を null 終端文字の比較に使用してはならない" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリ関数 memcmp、memmove および memcmp へのポインター引数は、互換性のある型の修飾付きおよび修飾なし版へのポインターでなければならない" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリ関数 memcmp へのポインター引数は、ポインター型、実質的な signed 型、実質的な unsigned 型、実質的なブール型、または実質的な列挙型を指していなければならない" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="名前がアンダースコアで始まる識別子を #define または #undef してはならない" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="予約済み識別子または予約済みマクロに#defineおよび#undefを使用してはならない (C90 コード)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="予約済み識別子または予約済みマクロに#defineおよび#undefを使用してはならない (C99 コード)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="defined 識別子を #define または #undef してはならない" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="名前がアンダースコアで始まる識別子を宣言してはならない" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリの予約済み識別子またはマクロ名を宣言してはならない (C90 コード)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリの予約済み識別子またはマクロ名を宣言してはならない (C99 コード)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;stdlib.h> のメモリの割り当て/解放の関数は、用いてはならない" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ヘッダー ファイル &lt;setjmp.h> は、用いてはならない" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ヘッダー ファイル &lt;setjmp.h> は、用いてはならない" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ヘッダー ファイル &lt;signal.h> は、用いてはならない" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ヘッダー ファイル &lt;signal.h> は、用いてはならない" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="2;" cat="MISRA2012-RULE" desc="標準ライブラリの入出力関数を使用してはいけない" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;stdlib.h> ライブラリの関数 atof、atoi、atol、atoll を使用してはならない" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;stdlib.h> ライブラリの関数 abort、exit、getenv、system を使用してはならない" id="MISRA2012-RULE-21_8" origId="MISRA2004-20_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;stdlib.h> のライブラリ関数 bsearch および qsort を使用してはいけない" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="標準ライブラリ関数を使用して動的に取得したリソースは、明示的に解放しなければならない" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="errno 設定関数の呼び出し後にだけ、errno と 0 を比較してチェックする" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="1 つのファイルを別のストリームで同時に読み取りアクセス用と書き込みアクセス用に開いてはならない" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの EOF と標準ライブラリ関数から返された未変更の戻り値を比較するべきである" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="errno 設定関数の呼び出し前に、errno に 0 を設定する" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="errno 設定関数の呼び出し後に、errno と 0 を比較してチェックする" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="else ブロックに到達しないコードがあってはならない" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="return、break、continue および goto 文の後に到達しないコードがあってはならない" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="if、do while、while、for ブロックに到達しないコードがあってはならない" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="switch 文に到達しないコードがあってはならない" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="for ループに到達しないコードがあってはならない" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="if または switch の後に到達しないコードがあってはならない" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="while、for、do...while ループの中の if または switch の後に到達できないコードがあってはならない" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="すべての空でない文は、どのように実行されても1つ以上の副作用を持つか、制御フローを変えなければならない" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="文字列 /* を C スタイル コメント内で使用してはならない" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="文字列 // を C スタイル コメント内で使用してはならない" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="文字列 /* を C++ スタイル コメント内で使用してはならない" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="// コメントで行の結合を使用してはならない" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="8 進または 16 進のエスケープ シーケンスは終了させなければならない" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="外部識別子は区別できなければならない" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ファイル スコープおよび同じ名前空間で宣言された識別子は区別できなければならない (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ファイル スコープおよび同じ名前空間で宣言された識別子は区別できなければならない (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="同じブロック スコープおよび同じ名前空間で宣言された識別子は区別できなければならない (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="同じブロック スコープおよび同じ名前空間で宣言された識別子は区別できなければならない (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="内側のスコープで宣言された識別子は、外側のスコープで宣言された識別子を隠蔽してはならない" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="内側のスコープで宣言された識別子は、外側のスコープで宣言された識別子を隠蔽してはならない" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの名前はマクロのパラメーターと違っているべきである(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの名前はマクロのパラメーターと違っているべきである(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの名前は現在定義されている他のマクロの名前と違っているべきである(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="マクロの名前は現在定義されている他のマクロの名前と違っているべきである(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="識別子はマクロ名と違っているべきである (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="識別子はマクロ名と違っているべきである (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="typedef 名はユニークな識別子でなければならない" id="MISRA2012-RULE-5_6_a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="typedef 名はユニークな識別子でなければならない" id="MISRA2012-RULE-5_6_b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="タグ名を他の目的で再利用してはならない" id="MISRA2012-RULE-5_7_a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="タグ名を再利用して別のタグを定義してはならない" id="MISRA2012-RULE-5_7_b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="外部リンケージを持つオブジェクトや関数はユニークでなければならない" id="MISRA2012-RULE-5_8" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ビットフィールドは適切な型で宣言しなければならない" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="1 ビットの名前付きのビットフィールドは signed 型であってはならない" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="8 進定数を使用してはいけない" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="すべての符号なし型の定数には、接尾辞 u または U を付けなければならない" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="小文字の l をリテラルの接尾辞で使用してはいけない" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="const の char へのポインターでない限り、オブジェクトに文字列リテラルを代入してはならない" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="インライン関数は static 記憶域クラスを使って宣言しなければならない" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="列挙子リストで、非明示的に指定された列挙定数の値は一意でなければならない" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="restrict 型修飾子を使用してはいけない" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数を宣言または定義するときは、常にその型を明記しなければならない" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトを宣言または定義するときは、常にその型を明記しなければならない" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="3;" cat="MISRA2012-RULE" desc="関数プロトタイプ宣言では、すべての仮引数に対して識別子を指定しなければならない" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数型には名前付きのパラメーターがなければならない" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数型はプロトタイプ形式でなければならない" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトまたは関数が 2 回以上宣言される場合、型は互換性がなければならない" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="関数の宣言と定義で使用される識別子は同一でなければならない" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="外部リンケージを持つオブジェクトまたは関数を定義する場合、宣言が参照できなければならない" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="外部リンケージを持つオブジェクトまたは関数を定義する場合、宣言が参照できなければならない" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="翻訳単位の中で、外部オブジェクトまたは外部関数に 2 つ以上の非定義宣言があってはならない" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="外部リンケージを持つ識別子は、外部定義を 1 つだけ持たなければならない" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="static 記憶域クラス指定子は、内部結合を持つオブジェクト並びに関数の定義および宣言に対して用いなければならない" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="集成体または共用体の初期化子は括弧で囲む必要がある" id="MISRA2012-RULE-9_2" origId="MISRA2004-9_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="配列を部分的に初期化してはならない" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトの要素を複数回初期化してはならない" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="指定された初期化子が配列オブジェクトの初期化に使用されている場合、配列のサイズを明示的に指定する必要がある" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="実質的な列挙型へのキャスト演算は許されない" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="実質的なブール型から、また実質的なブール型にキャストしてはならない" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="実質的な文字型と実質的な浮動小数点型の間でキャストしてはならない" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトへのポインターと整数型との間で変換を行ってはならない" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="void へのポインターをオブジェクトへのポインターに変換してはならない" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="4;" cat="MISRA2012-RULE" desc="式中のすべての演算子の種類が同じでない限り、括弧を使用する" id="MISRA2012-RULE-12_1_a" origId="MISRA2004-12_1_e" sev="4" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="33;" authUrg="0;" cat="MISRA2012-RULE" desc="論理演算子 &amp;&amp; または|| のオペランドは一次式でなければならない" id="MISRA2012-RULE-12_1_b" origId="MISRA2004-12_5" sev="4" total="33" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="sizeof 演算子では、() を使わなければならない" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="カンマ演算子は、用いてはならない" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="'+', '-', '*' 演算子の定数式における整数オーバーフローまたはアンダーフロー" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="'&lt;&lt;' 演算子の定数式における整数オーバーフローまたはアンダーフロー" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="インクリメント (++) またはデクリメント (--) 演算子がある完全な式は、インクリメント/デクリメント演算子によるもの以外の他の副作用の可能性があってはならない" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="代入演算子の結果を使用するべきではない" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="goto 文を用いてはならない" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="反復文では、ループを終了するために複数の break 文または goto 文を使用してはならない" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="7;" cat="MISRA2012-RULE" desc="関数では、関数の最後に唯一の出口がなければならない" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="26" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="配列型として宣言されたパラメーターに対応する関数引数には、適切な数の要素がなければならない" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数のパラメーターを変更するべきではない" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="35;" authUrg="6;" cat="MISRA2012-RULE" desc="+、-、+= および -= 演算子をポインター型の式に適用するべきではない" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="35" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="宣言には、3 階層以上のポインター間接参照があってはならない" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="union キーワードを使用してはいけない" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include 文の前には、前処理指令またはコメントだけを記述すべきである" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="前処理演算子 # 及び ## を用いてはならない" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef を用いてはならない" id="MISRA2012-RULE-20_5" origId="MISRA2004-19_6" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="&lt;fenv.h> の例外処理を使用してはいけない" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数は未使用の型宣言を持つべきではない" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ソース ファイルは未使用の型宣言を持つべきではない" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数は未使用のローカル タグ宣言を持つべきではない" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ソース ファイルは未使用のタグ宣言を持つべきではない" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="ソース ファイルは未使用のマクロ宣言を持つべきではない" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数は未使用のラベル宣言を持つべきではない" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="関数は未使用のパラメーターを持つべきではない" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="3 文字表記は、用いてはならない" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="内部リンケージを持つオブジェクトや関数識別子は、ユニークでなければならない" id="MISRA2012-RULE-5_9_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="内部リンケージを持つオブジェクトや関数識別子は、ユニークでなければならない" id="MISRA2012-RULE-5_9_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="外部結合を持つ配列を宣言するときは、明示的にサイズを指定しなければならない" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="関数プロトタイプのポインタ仮引数は、指し示しているオブジェクトを変更する目的でポインタが用いられていない場合、 const へのポインタとして宣言すべきである" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="仮引数の型は、指し示しているオブジェクトを変更する目的でポインタが用いられていない場合、 const へのポインタの typedef として宣言すべきである" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="関数およびオブジェクトが 1 つの翻訳単位でだけ参照される場合、外部リンケージが定義されてはならない" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="オブジェクトが単一の関数内だけでアクセスされている場合は、そのオブジェクトをブロック スコープで定義しなければならない" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="12;" authUrg="0;" id="1" total="12" />
            <Severity authTot="88;" authUrg="20;" id="2" total="88" />
            <Severity authTot="144;" authUrg="30;" id="4" total="144" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol msg="基本数値型 int を使用するべきではない" ln="9" locFile="/calcurator/calculator/src/calc.c" locStartln="9" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="792605233" tool="c++test" lineHash="792605233" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" urgent="true" hash="1567418237" locEndLn="9" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="9" locFile="/calcurator/calculator/src/calc.c" locStartln="9" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="792605233" tool="c++test" lineHash="792605233" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="25" locType="sr" urgent="true" hash="1567418237" locEndLn="9" goals="1," />
    <StdViol msg="printf 関数を使用してはいけない" ln="10" locFile="/calcurator/calculator/src/calc.c" locStartln="10" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-21_6" lnHash="-2139129572" tool="c++test" lineHash="-2139129572" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="10" goals="1," />
    <StdViol msg="未使用関数の &quot;printf&quot; 戻り値" ln="10" locFile="/calcurator/calculator/src/calc.c" locStartln="10" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="-2139129572" tool="c++test" lineHash="-2139129572" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="10" goals="1," />
    <StdViol msg="基本数値型 double を使用するべきではない" ln="11" locFile="/calcurator/calculator/src/calc.c" locStartln="11" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="2099554328" tool="c++test" lineHash="2099554328" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="11" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="12" locFile="/calcurator/calculator/src/calc.c" locStartln="12" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="694946570" tool="c++test" lineHash="694946570" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="12" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="13" locFile="/calcurator/calculator/src/calc.c" locStartln="13" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="1419020428" tool="c++test" lineHash="1419020428" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="13" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="14" locFile="/calcurator/calculator/src/calc.c" locStartln="14" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="396328401" tool="c++test" lineHash="396328401" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="14" goals="1," />
    <StdViol msg="基本数値型 double を使用するべきではない" ln="15" locFile="/calcurator/calculator/src/calc.c" locStartln="15" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="137410570" tool="c++test" lineHash="137410570" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="15" goals="1," />
    <StdViol msg="The second clause of a 'for' statement contains an object that is modified inside the loop body:  'cnt'" ln="16" locFile="/calcurator/calculator/src/calc.c" locStartln="16" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-14_2_c" lnHash="-1927406416" tool="c++test" lineHash="-1927406416" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="16" goals="1," />
    <StdViol msg="The loop counter is modified inside the 'for' loop body" ln="16" locFile="/calcurator/calculator/src/calc.c" locStartln="16" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-14_2_a" lnHash="-1927406416" tool="c++test" lineHash="-1927406416" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="16" goals="1," />
    <StdViol msg="for 文の 3 番目の句に for ループの本文で変更されるオブジェクトがある" ln="16" locFile="/calcurator/calculator/src/calc.c" locStartln="16" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-14_2_d" lnHash="-1927406416" tool="c++test" lineHash="-1927406416" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="16" goals="1," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'repolish' がポインター型である" ln="16" locFile="/calcurator/calculator/src/calc.c" locStartln="16" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-18_4" lnHash="-1927406416" tool="c++test" lineHash="-1927406416" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" urgent="true" hash="1567418237" locEndLn="16" goals="1," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'repolish' がポインター型である" ln="17" locFile="/calcurator/calculator/src/calc.c" locStartln="17" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-18_4" lnHash="771826797" tool="c++test" lineHash="771826797" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="13" locType="sr" urgent="true" hash="1567418237" locEndLn="17" goals="1," />
    <StdViol msg="'+' 演算子の左辺のオペランドがポインター型である" ln="28" locFile="/calcurator/calculator/src/calc.c" locStartln="28" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-18_4" lnHash="-1150829953" tool="c++test" lineHash="-1150829953" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="1567418237" locEndLn="28" goals="1," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'repolish' がポインター型である" ln="28" locFile="/calcurator/calculator/src/calc.c" locStartln="28" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-18_4" lnHash="-1150829953" tool="c++test" lineHash="-1150829953" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="1567418237" locEndLn="28" goals="1," />
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially floating' type" ln="29" locFile="/calcurator/calculator/src/calc.c" locStartln="29" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_3_b" lnHash="776511295" tool="c++test" lineHash="776511295" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="1567418237" locEndLn="29" goals="1," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="29" locFile="/calcurator/calculator/src/calc.c" locStartln="29" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-12_1_a" lnHash="776511295" tool="c++test" lineHash="776511295" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="24" locType="sr" urgent="true" hash="1567418237" locEndLn="29" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="29" locFile="/calcurator/calculator/src/calc.c" locStartln="29" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="776511295" tool="c++test" lineHash="776511295" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="36" locType="sr" urgent="true" hash="1567418237" locEndLn="29" goals="1," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'repolish' がポインター型である" ln="29" locFile="/calcurator/calculator/src/calc.c" locStartln="29" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-18_4" lnHash="776511295" tool="c++test" lineHash="776511295" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="43" locType="sr" urgent="true" hash="1567418237" locEndLn="29" goals="1," />
    <StdViol msg="Operands of the '&lt;' operator have different essential types: 'double' and 'signed char'" ln="30" locFile="/calcurator/calculator/src/calc.c" locStartln="30" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="-299054116" tool="c++test" lineHash="-299054116" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="30" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="32" locFile="/calcurator/calculator/src/calc.c" locStartln="32" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="1128022451" tool="c++test" lineHash="1128022451" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1567418237" locEndLn="32" goals="1," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="38" locFile="/calcurator/calculator/src/calc.c" locStartln="38" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-12_1_a" lnHash="1303384147" tool="c++test" lineHash="1303384147" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="10" locType="sr" urgent="true" hash="1567418237" locEndLn="38" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="38" locFile="/calcurator/calculator/src/calc.c" locStartln="38" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="1303384147" tool="c++test" lineHash="1303384147" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="22" locType="sr" urgent="true" hash="1567418237" locEndLn="38" goals="1," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'repolish' がポインター型である" ln="38" locFile="/calcurator/calculator/src/calc.c" locStartln="38" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-18_4" lnHash="1303384147" tool="c++test" lineHash="1303384147" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="29" locType="sr" urgent="true" hash="1567418237" locEndLn="38" goals="1," />
    <StdViol msg="Section of code should not be 'commented out'" ln="42" locFile="/calcurator/calculator/src/calc.c" locStartln="42" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_4" lnHash="1635788328" tool="c++test" lineHash="1635788328" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="1567418237" locEndLn="42" goals="1," />
    <FlowViol msg="配列 stack[0...255] の境界外のインデックス -2 にアクセスしている可能性がある" ln="44" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="10" rule="MISRA2012-DIR-4_1_a" FirstElSrcRngStartPos="0" lnHash="1790150320" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1224681703" lang="cpp" locEndPos="0" locEndLn="45" goals="0," locStartln="44" sev="2" locRef="1" dumpId="1" tool="c++test" lineHash="1790150320" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="792605233" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="int calc(char *repolish,int *calculationResult) {" ElType=".C" rngLn="9">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType="!" rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props />
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1790150320" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="if(stack[stackindex - 2] + stack[stackindex - 1] > INT_MAX){" ElType=".P" rngLn="44">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="44" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="1790150320" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1015246463" lang="cpp" locEndPos="0" locEndLn="45" goals="0," locStartln="44" sev="2" locRef="1" dumpId="2" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="1790150320" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1790150320" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="if(stack[stackindex - 2] + stack[stackindex - 1] > INT_MAX){" ElType=".P" rngLn="44">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="配列 stack[0...255] の境界外のインデックス -2 にアクセスしている可能性がある" ln="44" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="10" rule="MISRA2012-RULE-18_1_a" FirstElSrcRngStartPos="0" lnHash="1790150320" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1910747101" lang="cpp" locEndPos="0" locEndLn="45" goals="0," locStartln="44" sev="2" locRef="1" dumpId="3" tool="c++test" lineHash="1790150320" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="792605233" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="int calc(char *repolish,int *calculationResult) {" ElType=".C" rngLn="9">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType="!" rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props />
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1790150320" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="if(stack[stackindex - 2] + stack[stackindex - 1] > INT_MAX){" ElType=".P" rngLn="44">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="44" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="1790150320" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2010933154" lang="cpp" locEndPos="0" locEndLn="45" goals="0," locStartln="44" sev="1" locRef="1" dumpId="4" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="1790150320" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1790150320" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="if(stack[stackindex - 2] + stack[stackindex - 1] > INT_MAX){" ElType=".P" rngLn="44">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Operands of the '>' operator have different essential types: 'double' and 'int'" ln="44" locFile="/calcurator/calculator/src/calc.c" locStartln="44" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="1790150320" tool="c++test" lineHash="1790150320" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="44" goals="1," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="44" locFile="/calcurator/calculator/src/calc.c" locStartln="44" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-12_1_a" lnHash="1790150320" tool="c++test" lineHash="1790150320" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="44" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="46" locFile="/calcurator/calculator/src/calc.c" locStartln="46" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="-1211986665" tool="c++test" lineHash="-1211986665" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1567418237" locEndLn="46" goals="1," />
    <StdViol msg="Section of code should not be 'commented out'" ln="53" locFile="/calcurator/calculator/src/calc.c" locStartln="53" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_4" lnHash="562580347" tool="c++test" lineHash="562580347" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="1567418237" locEndLn="53" goals="1," />
    <FlowViol msg="配列 stack[0...255] の境界外のインデックス -3 にアクセスしている可能性がある" ln="55" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="10" rule="MISRA2012-DIR-4_1_a" FirstElSrcRngStartPos="0" lnHash="245308958" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="85076836" lang="cpp" locEndPos="0" locEndLn="56" goals="0," locStartln="55" sev="2" locRef="1" dumpId="5" tool="c++test" lineHash="245308958" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="792605233" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="int calc(char *repolish,int *calculationResult) {" ElType=".C" rngLn="9">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType="!" rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props />
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-949280734" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="79" ln="78" srcRngEndPos="0" srcRngStartln="78" srcRngStartPos="0" desc="if(stack[stackindex - 1] == 0){" ElType="." rngLn="78">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-490110412" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="83" ln="82" srcRngEndPos="0" srcRngStartln="82" srcRngStartPos="0" desc="stack[stackindex - 2] = stack[stackindex - 2] / stack[stackindex - 1];" ElType="." rngLn="82">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1956948280" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="84" ln="83" srcRngEndPos="0" srcRngStartln="83" srcRngStartPos="0" desc="stackindex--;" ElType="." rngLn="83">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1729845061" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="85" ln="84" srcRngEndPos="0" srcRngStartln="84" srcRngStartPos="0" desc="break;" ElType="." rngLn="84">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="245308958" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="56" ln="55" srcRngEndPos="0" srcRngStartln="55" srcRngStartPos="0" desc="if(stack[stackindex - 2] - stack[stackindex - 1] &lt; INT_MIN){" ElType=".P" rngLn="55">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="55" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="245308958" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1015246463" lang="cpp" locEndPos="0" locEndLn="56" goals="0," locStartln="55" sev="2" locRef="1" dumpId="6" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="245308958" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="245308958" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="56" ln="55" srcRngEndPos="0" srcRngStartln="55" srcRngStartPos="0" desc="if(stack[stackindex - 2] - stack[stackindex - 1] &lt; INT_MIN){" ElType=".P" rngLn="55">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="配列 stack[0...255] の境界外のインデックス -3 にアクセスしている可能性がある" ln="55" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="10" rule="MISRA2012-RULE-18_1_a" FirstElSrcRngStartPos="0" lnHash="245308958" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1007594592" lang="cpp" locEndPos="0" locEndLn="56" goals="0," locStartln="55" sev="2" locRef="1" dumpId="7" tool="c++test" lineHash="245308958" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="792605233" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="int calc(char *repolish,int *calculationResult) {" ElType=".C" rngLn="9">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType="!" rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props />
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-949280734" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="79" ln="78" srcRngEndPos="0" srcRngStartln="78" srcRngStartPos="0" desc="if(stack[stackindex - 1] == 0){" ElType="." rngLn="78">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-490110412" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="83" ln="82" srcRngEndPos="0" srcRngStartln="82" srcRngStartPos="0" desc="stack[stackindex - 2] = stack[stackindex - 2] / stack[stackindex - 1];" ElType="." rngLn="82">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1956948280" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="84" ln="83" srcRngEndPos="0" srcRngStartln="83" srcRngStartPos="0" desc="stackindex--;" ElType="." rngLn="83">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1729845061" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="85" ln="84" srcRngEndPos="0" srcRngStartln="84" srcRngStartPos="0" desc="break;" ElType="." rngLn="84">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="245308958" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="56" ln="55" srcRngEndPos="0" srcRngStartln="55" srcRngStartPos="0" desc="if(stack[stackindex - 2] - stack[stackindex - 1] &lt; INT_MIN){" ElType=".P" rngLn="55">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="55" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="245308958" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2010933154" lang="cpp" locEndPos="0" locEndLn="56" goals="0," locStartln="55" sev="1" locRef="1" dumpId="8" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="245308958" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="245308958" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="56" ln="55" srcRngEndPos="0" srcRngStartln="55" srcRngStartPos="0" desc="if(stack[stackindex - 2] - stack[stackindex - 1] &lt; INT_MIN){" ElType=".P" rngLn="55">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Operands of the '&lt;' operator have different essential types: 'double' and 'int'" ln="55" locFile="/calcurator/calculator/src/calc.c" locStartln="55" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="245308958" tool="c++test" lineHash="245308958" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="55" goals="1," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="55" locFile="/calcurator/calculator/src/calc.c" locStartln="55" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-12_1_a" lnHash="245308958" tool="c++test" lineHash="245308958" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="55" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="57" locFile="/calcurator/calculator/src/calc.c" locStartln="57" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="523528210" tool="c++test" lineHash="523528210" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1567418237" locEndLn="57" goals="1," />
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="64" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-1551171203" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1015246463" lang="cpp" locEndPos="0" locEndLn="65" goals="0," locStartln="64" sev="2" locRef="1" dumpId="9" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1551171203" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1551171203" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="65" ln="64" srcRngEndPos="0" srcRngStartln="64" srcRngStartPos="0" desc="overflow_check = stack[stackindex - 2] * stack[stackindex - 1];" ElType=".P" rngLn="64">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="64" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-1551171203" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2010933154" lang="cpp" locEndPos="0" locEndLn="65" goals="0," locStartln="64" sev="1" locRef="1" dumpId="10" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1551171203" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1551171203" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="65" ln="64" srcRngEndPos="0" srcRngStartln="64" srcRngStartPos="0" desc="overflow_check = stack[stackindex - 2] * stack[stackindex - 1];" ElType=".P" rngLn="64">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Section of code should not be 'commented out'" ln="65" locFile="/calcurator/calculator/src/calc.c" locStartln="65" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_4" lnHash="103813649" tool="c++test" lineHash="103813649" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="1567418237" locEndLn="65" goals="1," />
    <StdViol msg="Operands of the '>' operator have different essential types: 'double' and 'int'" ln="66" locFile="/calcurator/calculator/src/calc.c" locStartln="66" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="1311097457" tool="c++test" lineHash="1311097457" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="66" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="68" locFile="/calcurator/calculator/src/calc.c" locStartln="68" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="-1211986665" tool="c++test" lineHash="-1211986665" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1567418237" locEndLn="68" goals="1," />
    <StdViol msg="Operands of the '&lt;' operator have different essential types: 'double' and 'int'" ln="69" locFile="/calcurator/calculator/src/calc.c" locStartln="69" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="-1210943501" tool="c++test" lineHash="-1210943501" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="14" locType="sr" urgent="true" hash="1567418237" locEndLn="69" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="71" locFile="/calcurator/calculator/src/calc.c" locStartln="71" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="523528210" tool="c++test" lineHash="523528210" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1567418237" locEndLn="71" goals="1," />
    <FlowViol msg="配列 stack[0...255] の境界外のインデックス -1 にアクセスしている可能性がある" ln="78" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="10" rule="MISRA2012-DIR-4_1_a" FirstElSrcRngStartPos="0" lnHash="-949280734" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-424213745" lang="cpp" locEndPos="0" locEndLn="79" goals="0," locStartln="78" sev="2" locRef="1" dumpId="11" tool="c++test" lineHash="-949280734" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="792605233" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="int calc(char *repolish,int *calculationResult) {" ElType=".C" rngLn="9">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType="!" rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props />
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-949280734" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="79" ln="78" srcRngEndPos="0" srcRngStartln="78" srcRngStartPos="0" desc="if(stack[stackindex - 1] == 0){" ElType=".P" rngLn="78">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="78" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-949280734" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1015208040" lang="cpp" locEndPos="0" locEndLn="79" goals="0," locStartln="78" sev="2" locRef="1" dumpId="12" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-949280734" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-949280734" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="79" ln="78" srcRngEndPos="0" srcRngStartln="78" srcRngStartPos="0" desc="if(stack[stackindex - 1] == 0){" ElType=".P" rngLn="78">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="配列 stack[0...255] の境界外のインデックス -1 にアクセスしている可能性がある" ln="78" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="10" rule="MISRA2012-RULE-18_1_a" FirstElSrcRngStartPos="0" lnHash="-949280734" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="542407627" lang="cpp" locEndPos="0" locEndLn="79" goals="0," locStartln="78" sev="2" locRef="1" dumpId="13" tool="c++test" lineHash="-949280734" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="792605233" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="int calc(char *repolish,int *calculationResult) {" ElType=".C" rngLn="9">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType="!" rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props />
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-949280734" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="79" ln="78" srcRngEndPos="0" srcRngStartln="78" srcRngStartPos="0" desc="if(stack[stackindex - 1] == 0){" ElType=".P" rngLn="78">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[]&quot; は初期化する前に使用されている" ln="78" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-949280734" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2011025845" lang="cpp" locEndPos="0" locEndLn="79" goals="0," locStartln="78" sev="1" locRef="1" dumpId="14" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-949280734" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="771826797" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="switch (*(repolish + cnt)) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-949280734" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="79" ln="78" srcRngEndPos="0" srcRngStartln="78" srcRngStartPos="0" desc="if(stack[stackindex - 1] == 0){" ElType=".P" rngLn="78">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Operands of the '==' operator have different essential types: 'double' and 'signed char'" ln="78" locFile="/calcurator/calculator/src/calc.c" locStartln="78" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="-949280734" tool="c++test" lineHash="-949280734" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="1567418237" locEndLn="78" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="80" locFile="/calcurator/calculator/src/calc.c" locStartln="80" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="1128022358" tool="c++test" lineHash="1128022358" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1567418237" locEndLn="80" goals="1," />
    <StdViol msg="終了の break の前に文またはコメントがない" ln="86" locFile="/calcurator/calculator/src/calc.c" locStartln="86" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-16_4_b" lnHash="1729845061" tool="c++test" lineHash="1729845061" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="1567418237" locEndLn="86" goals="1," />
    <StdViol msg="終了の break の前に文またはコメントがない" ln="86" locFile="/calcurator/calculator/src/calc.c" locStartln="86" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-16_1_f" lnHash="1729845061" tool="c++test" lineHash="1729845061" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" urgent="true" hash="1567418237" locEndLn="86" goals="1," />
    <FlowViol msg="&quot;stack[0]&quot; は初期化する前に使用されている" ln="89" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-21168178" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1310159769" lang="cpp" locEndPos="0" locEndLn="90" goals="0," locStartln="89" sev="2" locRef="1" dumpId="15" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-21168178" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="!" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-21168178" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="90" ln="89" srcRngEndPos="0" srcRngStartln="89" srcRngStartPos="0" desc="if (stack[0] > 0){" ElType=".P" rngLn="89">
          <Props>
            <Prop key="Tracked variables" val="stack[0]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;stack[0]&quot; は初期化する前に使用されている" ln="89" locFile="/calcurator/calculator/src/calc.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="12" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-21168178" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/calc.c" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="88635972" lang="cpp" locEndPos="0" locEndLn="90" goals="0," locStartln="89" sev="1" locRef="1" dumpId="16" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-21168178" locType="sr" hash="1567418237" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-2139129572" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,repolish);" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc lineHash="2099554328" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="double stack[256];" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="694946570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="int stackindex = 0;" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1419020428" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int cnt;" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="396328401" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int tmp = 0;" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="137410570" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="double overflow_check;" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1927406416" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="for (cnt = 0; *(repolish + cnt) != '\0'; cnt++) {" ElType="!" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="stack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-21168178" locType="sr" srcRnghash="1567418237" locRef="1" srcRngFile="/calcurator/calculator/src/calc.c" srcRngEndLn="90" ln="89" srcRngEndPos="0" srcRngStartln="89" srcRngStartPos="0" desc="if (stack[0] > 0){" ElType=".P" rngLn="89">
          <Props>
            <Prop key="Tracked variables" val="stack[0]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Operands of the '>' operator have different essential types: 'double' and 'signed char'" ln="89" locFile="/calcurator/calculator/src/calc.c" locStartln="89" sev="2" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-10_4_a" lnHash="-21168178" tool="c++test" lineHash="-21168178" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1567418237" locEndLn="89" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="94" locFile="/calcurator/calculator/src/calc.c" locStartln="94" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-DIR-4_6_b" lnHash="-799651881" tool="c++test" lineHash="-799651881" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="24" locType="sr" urgent="true" hash="1567418237" locEndLn="94" goals="1," />
    <StdViol msg="calc 関数に return 文を 1 つだけ記述する" ln="96" locFile="/calcurator/calculator/src/calc.c" locStartln="96" sev="4" auth="fujisawa" locRef="1" rule="MISRA2012-RULE-15_5" lnHash="1599597842" tool="c++test" lineHash="1599597842" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="1567418237" locEndLn="96" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="19" locFile="/calcurator/calculator/src/calculator.c" locStartln="19" sev="4" auth="fujisawa" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1154621212" tool="c++test" lineHash="-1154621212" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="873799153" locEndLn="19" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="23" locFile="/calcurator/calculator/src/calculator.c" locStartln="23" sev="4" auth="fujisawa" locRef="2" rule="MISRA2012-DIR-4_4" lnHash="-2020755711" tool="c++test" lineHash="-2020755711" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="873799153" locEndLn="23" goals="0," />
    <StdViol msg="printf 関数を使用してはいけない" ln="25" locFile="/calcurator/calculator/src/calculator.c" locStartln="25" sev="2" auth="fujisawa" locRef="2" rule="MISRA2012-RULE-21_6" lnHash="-805794311" tool="c++test" lineHash="-805794311" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="873799153" locEndLn="25" goals="1," />
    <StdViol msg="未使用関数の &quot;printf&quot; 戻り値" ln="25" locFile="/calcurator/calculator/src/calculator.c" locStartln="25" sev="2" auth="fujisawa" locRef="2" rule="MISRA2012-RULE-17_7_a" lnHash="-805794311" tool="c++test" lineHash="-805794311" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="873799153" locEndLn="25" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="9" locFile="/calcurator/calculator/src/format.c" locStartln="9" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1420997239" tool="c++test" lineHash="-1420997239" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="1360408807" locEndLn="9" goals="0," />
    <StdViol msg="関数 strlenCheck は、定義されている翻訳単位でだけ参照されている" ln="9" locFile="/calcurator/calculator/src/format.c" locStartln="9" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="-1420997239" tool="c++test" lineHash="-1420997239" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="9" goals="0," />
    <FlowViol msg="汚染された ファイルからのデータ (&quot;instr[&lt;インデックス>]&quot;) が コンソール に出力された" ln="10" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="危険なメソッド呼び出し" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="14" rule="MISRA2012-DIR-4_14_k" FirstElSrcRngStartPos="0" lnHash="336262392" ruleSCSCMsg="汚染ポイント" FirstElSrcRngFile="/calcurator/calculator/src/viewer.c" FirstElSrcRngStartln="13" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-132114772" lang="cpp" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="3" dumpId="17" tool="c++test" lineHash="336262392" locType="sr" hash="1360408807" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-650477116" locType="sr" srcRnghash="873799153" locRef="2" srcRngFile="/calcurator/calculator/src/calculator.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="char str1[256];//とりあえず256あればいっか。" ElType="." rngLn="18">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="873799153" locRef="2" srcRngFile="/calcurator/calculator/src/calculator.c" srcRngEndLn="20" ln="19" srcRngEndPos="0" srcRngStartln="19" srcRngStartPos="0" desc="int result;" ElType="." rngLn="19">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-87265064" locType="sr" srcRnghash="873799153" locRef="2" srcRngFile="/calcurator/calculator/src/calculator.c" srcRngEndLn="21" ln="20" srcRngEndPos="0" srcRngStartln="20" srcRngStartPos="0" desc="char str2[256];" ElType="." rngLn="20">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-2018838044" locType="sr" srcRnghash="873799153" locRef="2" srcRngFile="/calcurator/calculator/src/calculator.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="inputconsole(str1);" ElType="!" rngLn="21">
          <ElDescList>
            <ElDesc lineHash="-1550009628" locType="sr" srcRnghash="-1632907632" locRef="4" srcRngFile="/calcurator/calculator/src/viewer.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="fgets(str2,256,stdin);" ElType=".C" rngLn="13">
              <Props>
                <Prop key="Tracked variables" val="str2[&lt;インデックス>]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc lineHash="1305845216" locType="sr" srcRnghash="873799153" locRef="2" srcRngFile="/calcurator/calculator/src/calculator.c" srcRngEndLn="23" ln="22" srcRngEndPos="0" srcRngStartln="22" srcRngStartPos="0" desc="createOutputStatement(str1,str2);" ElType="!" rngLn="22">
          <ElDescList>
            <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
              <Props>
                <Prop key="Tracked variables" val="instr[&lt;インデックス>]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
              <Props>
                <Prop key="Tracked variables" val="instr[&lt;インデックス>]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType="." rngLn="174">
              <Props>
                <Prop key="Tracked variables" val="instr[&lt;インデックス>]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="!" rngLn="175">
              <ElDescList>
                <ElDesc lineHash="336262392" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="printf(&quot;%s\n&quot;,instr);" ElType=".P" rngLn="10">
                  <Props>
                    <Prop key="Tracked variables" val="instr[&lt;インデックス>]" />
                  </Props>
                </ElDesc>
              </ElDescList>
              <Props>
                <Prop key="Tracked variables" val="instr[&lt;インデックス>]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="str1[&lt;インデックス>]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="printf 関数を使用してはいけない" ln="10" locFile="/calcurator/calculator/src/format.c" locStartln="10" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="336262392" tool="c++test" lineHash="336262392" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="10" goals="0," />
    <StdViol msg="未使用関数の &quot;printf&quot; 戻り値" ln="10" locFile="/calcurator/calculator/src/format.c" locStartln="10" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="336262392" tool="c++test" lineHash="336262392" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="10" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="11" locFile="/calcurator/calculator/src/format.c" locStartln="11" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1556922306" tool="c++test" lineHash="1556922306" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="11" goals="0," />
    <StdViol msg="The expression of the 'essentially unsigned' type is assigned to an object with the 'essentially signed' type" ln="11" locFile="/calcurator/calculator/src/format.c" locStartln="11" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="1556922306" tool="c++test" lineHash="1556922306" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="1360408807" locEndLn="11" goals="0," />
    <StdViol msg="strlenCheck 関数に return 文を 1 つだけ記述する" ln="13" locFile="/calcurator/calculator/src/format.c" locStartln="13" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1688062470" tool="c++test" lineHash="-1688062470" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="13" goals="0," />
    <StdViol msg="strlenCheck 関数に return 文を 1 つだけ記述する" ln="15" locFile="/calcurator/calculator/src/format.c" locStartln="15" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1688062439" tool="c++test" lineHash="-1688062439" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="15" goals="0," />
    <StdViol msg="strlenCheck 関数に return 文を 1 つだけ記述する" ln="17" locFile="/calcurator/calculator/src/format.c" locStartln="17" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1688062501" tool="c++test" lineHash="-1688062501" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="17" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="21" locFile="/calcurator/calculator/src/format.c" locStartln="21" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-2036393398" tool="c++test" lineHash="-2036393398" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="1360408807" locEndLn="21" goals="0," />
    <StdViol msg="関数 formatCheck は、定義されている翻訳単位でだけ参照されている" ln="21" locFile="/calcurator/calculator/src/format.c" locStartln="21" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="-2036393398" tool="c++test" lineHash="-2036393398" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="21" goals="0," />
    <StdViol msg="パラメータ instr を const 指定付きで渡す" ln="21" locFile="/calcurator/calculator/src/format.c" locStartln="21" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="-2036393398" tool="c++test" lineHash="-2036393398" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="23" locType="sr" hash="1360408807" locEndLn="21" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="22" locFile="/calcurator/calculator/src/format.c" locStartln="22" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1419020428" tool="c++test" lineHash="1419020428" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="22" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'instr' がポインター型である" ln="24" locFile="/calcurator/calculator/src/format.c" locStartln="24" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-622076470" tool="c++test" lineHash="-622076470" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" hash="1360408807" locEndLn="24" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'instr' がポインター型である" ln="25" locFile="/calcurator/calculator/src/format.c" locStartln="25" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-63899404" tool="c++test" lineHash="-63899404" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="1360408807" locEndLn="25" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="29" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="40" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="50" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="51" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="61" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="62" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="26" locFile="/calcurator/calculator/src/format.c" locStartln="26" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-86514536" tool="c++test" lineHash="-86514536" locStartPos="72" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="73" locType="sr" hash="1360408807" locEndLn="26" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="19" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="30" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="41" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="53" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="63" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="64" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="74" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="75" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="85" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="86" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="96" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="97" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="108" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="109" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="関数 formatCheck の論理式 || のオペランドを括弧で囲まなければならない" ln="27" locFile="/calcurator/calculator/src/format.c" locStartln="27" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-739898966" tool="c++test" lineHash="-739898966" locStartPos="121" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="122" locType="sr" hash="1360408807" locEndLn="27" goals="0," />
    <StdViol msg="formatCheck 関数に return 文を 1 つだけ記述する" ln="30" locFile="/calcurator/calculator/src/format.c" locStartln="30" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-526317937" tool="c++test" lineHash="-526317937" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="30" goals="0," />
    <StdViol msg="formatCheck 関数に return 文を 1 つだけ記述する" ln="33" locFile="/calcurator/calculator/src/format.c" locStartln="33" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="1599597842" tool="c++test" lineHash="1599597842" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="33" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="37" locFile="/calcurator/calculator/src/format.c" locStartln="37" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1559388538" tool="c++test" lineHash="1559388538" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="1360408807" locEndLn="37" goals="0," />
    <StdViol msg="関数 reversePolish は、定義されている翻訳単位でだけ参照されている" ln="37" locFile="/calcurator/calculator/src/format.c" locStartln="37" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-8_7" lnHash="1559388538" tool="c++test" lineHash="1559388538" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="37" goals="0," />
    <StdViol msg="パラメータ ptr を const 指定付きで渡す" ln="37" locFile="/calcurator/calculator/src/format.c" locStartln="37" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="1559388538" tool="c++test" lineHash="1559388538" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="25" locType="sr" hash="1360408807" locEndLn="37" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="39" locFile="/calcurator/calculator/src/format.c" locStartln="39" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_4" lnHash="826186618" tool="c++test" lineHash="826186618" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="39" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="40" locFile="/calcurator/calculator/src/format.c" locStartln="40" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1023394153" tool="c++test" lineHash="-1023394153" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="40" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="41" locFile="/calcurator/calculator/src/format.c" locStartln="41" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-927949068" tool="c++test" lineHash="-927949068" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="41" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="42" locFile="/calcurator/calculator/src/format.c" locStartln="42" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-1650144184" tool="c++test" lineHash="-1650144184" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" hash="1360408807" locEndLn="42" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="43" locFile="/calcurator/calculator/src/format.c" locStartln="43" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="803201899" tool="c++test" lineHash="803201899" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="12" locType="sr" hash="1360408807" locEndLn="43" goals="0," />
    <StdViol msg="0 との比較テストは明示的に行うべきである" ln="54" locFile="/calcurator/calculator/src/format.c" locStartln="54" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="-1171098897" tool="c++test" lineHash="-1171098897" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="54" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="55" locFile="/calcurator/calculator/src/format.c" locStartln="55" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="827425183" tool="c++test" lineHash="827425183" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="28" locType="sr" hash="1360408807" locEndLn="55" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="59" locFile="/calcurator/calculator/src/format.c" locStartln="59" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="1032700221" tool="c++test" lineHash="1032700221" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="24" locType="sr" hash="1360408807" locEndLn="59" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="72" locFile="/calcurator/calculator/src/format.c" locStartln="72" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="830278483" tool="c++test" lineHash="830278483" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="26" locType="sr" hash="1360408807" locEndLn="72" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="75" locFile="/calcurator/calculator/src/format.c" locStartln="75" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-296774601" tool="c++test" lineHash="-296774601" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="12" locType="sr" hash="1360408807" locEndLn="75" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="75" locFile="/calcurator/calculator/src/format.c" locStartln="75" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-296774601" tool="c++test" lineHash="-296774601" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="42" locType="sr" hash="1360408807" locEndLn="75" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="80" locFile="/calcurator/calculator/src/format.c" locStartln="80" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-1446915915" tool="c++test" lineHash="-1446915915" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="30" locType="sr" hash="1360408807" locEndLn="80" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="81" locFile="/calcurator/calculator/src/format.c" locStartln="81" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_4" lnHash="252182835" tool="c++test" lineHash="252182835" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="81" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="84" locFile="/calcurator/calculator/src/format.c" locStartln="84" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="830278483" tool="c++test" lineHash="830278483" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="26" locType="sr" hash="1360408807" locEndLn="84" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 &amp;&amp; のオペランドを括弧で囲まなければならない" ln="87" locFile="/calcurator/calculator/src/format.c" locStartln="87" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-847713648" tool="c++test" lineHash="-847713648" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="11" locType="sr" hash="1360408807" locEndLn="87" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="87" locFile="/calcurator/calculator/src/format.c" locStartln="87" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-847713648" tool="c++test" lineHash="-847713648" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="27" locType="sr" hash="1360408807" locEndLn="87" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="87" locFile="/calcurator/calculator/src/format.c" locStartln="87" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-847713648" tool="c++test" lineHash="-847713648" locStartPos="56" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="57" locType="sr" hash="1360408807" locEndLn="87" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="94" locFile="/calcurator/calculator/src/format.c" locStartln="94" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="830278483" tool="c++test" lineHash="830278483" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="26" locType="sr" hash="1360408807" locEndLn="94" goals="0," />
    <FlowViol msg="配列 opstack[0...255] の境界外のインデックス -1 にアクセスしている可能性がある" ln="102" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="38" rule="MISRA2012-DIR-4_1_a" FirstElSrcRngStartPos="0" lnHash="482670219" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2007493133" lang="cpp" locEndPos="0" locEndLn="103" goals="0," locStartln="102" sev="2" locRef="3" dumpId="18" tool="c++test" lineHash="482670219" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1559388538" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="int reversePolish(char* ptr,char outstr[256]){" ElType=".C" rngLn="37">
          <Props />
        </ElDesc>
        <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="!" rngLn="38">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
          <Props />
        </ElDesc>
        <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="101" ln="100" srcRngEndPos="0" srcRngStartln="100" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="100">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-409547812" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="102" ln="101" srcRngEndPos="0" srcRngStartln="101" srcRngStartPos="0" desc="opcnt++;" ElType="." rngLn="101">
          <Props />
        </ElDesc>
        <ElDesc lineHash="482670219" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="103" ln="102" srcRngEndPos="0" srcRngStartln="102" srcRngStartPos="0" desc="if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){" ElType=".P" rngLn="102">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;opstack[]&quot; は初期化する前に使用されている" ln="102" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="39" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="482670219" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="38" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-359125630" lang="cpp" locEndPos="0" locEndLn="103" goals="0," locStartln="102" sev="2" locRef="3" dumpId="19" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="482670219" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType=".C" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="101" ln="100" srcRngEndPos="0" srcRngStartln="100" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="100">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-409547812" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="102" ln="101" srcRngEndPos="0" srcRngStartln="101" srcRngStartPos="0" desc="opcnt++;" ElType="." rngLn="101">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="482670219" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="103" ln="102" srcRngEndPos="0" srcRngStartln="102" srcRngStartPos="0" desc="if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){" ElType=".P" rngLn="102">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="配列 opstack[0...255] の境界外のインデックス -1 にアクセスしている可能性がある" ln="102" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="38" rule="MISRA2012-RULE-18_1_a" FirstElSrcRngStartPos="0" lnHash="482670219" ruleSCSCMsg="パス開始ポイント" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1320906039" lang="cpp" locEndPos="0" locEndLn="103" goals="0," locStartln="102" sev="2" locRef="3" dumpId="20" tool="c++test" lineHash="482670219" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1559388538" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="int reversePolish(char* ptr,char outstr[256]){" ElType=".C" rngLn="37">
          <Props />
        </ElDesc>
        <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="!" rngLn="38">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
          <Props />
        </ElDesc>
        <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="101" ln="100" srcRngEndPos="0" srcRngStartln="100" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="100">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-409547812" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="102" ln="101" srcRngEndPos="0" srcRngStartln="101" srcRngStartPos="0" desc="opcnt++;" ElType="." rngLn="101">
          <Props />
        </ElDesc>
        <ElDesc lineHash="482670219" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="103" ln="102" srcRngEndPos="0" srcRngStartln="102" srcRngStartPos="0" desc="if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){" ElType=".P" rngLn="102">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;opstack[]&quot; は初期化する前に使用されている" ln="102" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="39" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="482670219" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="38" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1580784545" lang="cpp" locEndPos="0" locEndLn="103" goals="0," locStartln="102" sev="1" locRef="3" dumpId="21" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="482670219" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType=".C" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="101" ln="100" srcRngEndPos="0" srcRngStartln="100" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="100">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-409547812" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="102" ln="101" srcRngEndPos="0" srcRngStartln="101" srcRngStartPos="0" desc="opcnt++;" ElType="." rngLn="101">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="482670219" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="103" ln="102" srcRngEndPos="0" srcRngStartln="102" srcRngStartPos="0" desc="if(opstack[opindex -1] == '*' || opstack[opindex -1] == '/'){" ElType=".P" rngLn="102">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="102" locFile="/calcurator/calculator/src/format.c" locStartln="102" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="482670219" tool="c++test" lineHash="482670219" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" hash="1360408807" locEndLn="102" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="102" locFile="/calcurator/calculator/src/format.c" locStartln="102" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="482670219" tool="c++test" lineHash="482670219" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="37" locType="sr" hash="1360408807" locEndLn="102" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="107" locFile="/calcurator/calculator/src/format.c" locStartln="107" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-1446915915" tool="c++test" lineHash="-1446915915" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="30" locType="sr" hash="1360408807" locEndLn="107" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="109" locFile="/calcurator/calculator/src/format.c" locStartln="109" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="830278483" tool="c++test" lineHash="830278483" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="26" locType="sr" hash="1360408807" locEndLn="109" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドがポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="10" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="10" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="35" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドがポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="37" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="37" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="61" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="62" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドがポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="63" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="64" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="63" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="64" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="87" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="88" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドがポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="89" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="90" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="115" locFile="/calcurator/calculator/src/format.c" locStartln="115" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-520350377" tool="c++test" lineHash="-520350377" locStartPos="89" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="90" locType="sr" hash="1360408807" locEndLn="115" goals="0," />
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="116" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-1644209178" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="141139040" lang="cpp" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="2" locRef="3" dumpId="22" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1644209178" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="115" ln="114" srcRngEndPos="0" srcRngStartln="114" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="114">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-520350377" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="116" ln="115" srcRngEndPos="0" srcRngStartln="115" srcRngStartPos="0" desc="if (*(ptr + cnt + 1) == '+' || *(ptr + cnt + 1) == '-' || *(ptr + cnt + 1) == '*'|| *(ptr + cnt + 1) == '/'){" ElType="." rngLn="115">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1644209178" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="117" ln="116" srcRngEndPos="0" srcRngStartln="116" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="116">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="116" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-1644209178" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1127650749" lang="cpp" locEndPos="0" locEndLn="117" goals="0," locStartln="116" sev="1" locRef="3" dumpId="23" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1644209178" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="115" ln="114" srcRngEndPos="0" srcRngStartln="114" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="114">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-520350377" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="116" ln="115" srcRngEndPos="0" srcRngStartln="115" srcRngStartPos="0" desc="if (*(ptr + cnt + 1) == '+' || *(ptr + cnt + 1) == '-' || *(ptr + cnt + 1) == '*'|| *(ptr + cnt + 1) == '/'){" ElType="." rngLn="115">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1644209178" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="117" ln="116" srcRngEndPos="0" srcRngStartln="116" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="116">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="未使用関数の &quot;memset&quot; 戻り値" ln="116" locFile="/calcurator/calculator/src/format.c" locStartln="116" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1644209178" tool="c++test" lineHash="-1644209178" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="116" goals="0," />
    <StdViol msg="The argument number '2' ('essentially character' type) is passed to the function 'memset' as a parameter with the 'essentially signed' type" ln="116" locFile="/calcurator/calculator/src/format.c" locStartln="116" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="-1644209178" tool="c++test" lineHash="-1644209178" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="19" locType="sr" hash="1360408807" locEndLn="116" goals="0," />
    <StdViol msg="reversePolish 関数に return 文を 1 つだけ記述する" ln="117" locFile="/calcurator/calculator/src/format.c" locStartln="117" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="1128022327" tool="c++test" lineHash="1128022327" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="117" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="119" locFile="/calcurator/calculator/src/format.c" locStartln="119" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="457445372" tool="c++test" lineHash="457445372" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="25" locType="sr" hash="1360408807" locEndLn="119" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'-' 演算子の左辺のオペランドがポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="10" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="10" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_a" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="10" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="35" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'-' 演算子の左辺のオペランドがポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="37" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="37" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_a" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="37" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="61" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="62" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'-' 演算子の左辺のオペランドがポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="63" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="64" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="63" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="64" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_a" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="63" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="64" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="関数 reversePolish の論理式 || のオペランドを括弧で囲まなければならない" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_b" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="87" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="88" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'-' 演算子の左辺のオペランドがポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="89" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="90" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="'+' 演算子の左辺のオペランドとして使用されている変数 'ptr' がポインター型である" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-18_4" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="89" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="90" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="124" locFile="/calcurator/calculator/src/format.c" locStartln="124" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_a" lnHash="-273032677" tool="c++test" lineHash="-273032677" locStartPos="89" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="90" locType="sr" hash="1360408807" locEndLn="124" goals="0," />
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="125" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-1644209178" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="141139040" lang="cpp" locEndPos="0" locEndLn="126" goals="0," locStartln="125" sev="2" locRef="3" dumpId="24" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1644209178" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="124" ln="123" srcRngEndPos="0" srcRngStartln="123" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="123">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-273032677" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="125" ln="124" srcRngEndPos="0" srcRngStartln="124" srcRngStartPos="0" desc="if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){" ElType="." rngLn="124">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1644209178" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="126" ln="125" srcRngEndPos="0" srcRngStartln="125" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="125">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="125" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-1644209178" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1127650749" lang="cpp" locEndPos="0" locEndLn="126" goals="0," locStartln="125" sev="1" locRef="3" dumpId="25" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1644209178" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="124" ln="123" srcRngEndPos="0" srcRngStartln="123" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="123">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-273032677" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="125" ln="124" srcRngEndPos="0" srcRngStartln="124" srcRngStartPos="0" desc="if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){" ElType="." rngLn="124">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1644209178" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="126" ln="125" srcRngEndPos="0" srcRngStartln="125" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="125">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="未使用関数の &quot;memset&quot; 戻り値" ln="125" locFile="/calcurator/calculator/src/format.c" locStartln="125" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1644209178" tool="c++test" lineHash="-1644209178" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="125" goals="0," />
    <StdViol msg="The argument number '2' ('essentially character' type) is passed to the function 'memset' as a parameter with the 'essentially signed' type" ln="125" locFile="/calcurator/calculator/src/format.c" locStartln="125" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="-1644209178" tool="c++test" lineHash="-1644209178" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="19" locType="sr" hash="1360408807" locEndLn="125" goals="0," />
    <StdViol msg="reversePolish 関数に return 文を 1 つだけ記述する" ln="126" locFile="/calcurator/calculator/src/format.c" locStartln="126" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="1128022327" tool="c++test" lineHash="1128022327" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="126" goals="0," />
    <FlowViol msg="&quot;opstack[]&quot; は初期化する前に使用されている" ln="128" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="39" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-1144613666" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="38" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1876973935" lang="cpp" locEndPos="0" locEndLn="129" goals="0," locStartln="128" sev="2" locRef="3" dumpId="26" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1144613666" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType=".C" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="124" ln="123" srcRngEndPos="0" srcRngStartln="123" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="123">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-273032677" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="125" ln="124" srcRngEndPos="0" srcRngStartln="124" srcRngStartPos="0" desc="if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){" ElType="." rngLn="124">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1144613666" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="129" ln="128" srcRngEndPos="0" srcRngStartln="128" srcRngStartPos="0" desc="while(opstack[opindex -1] != '('){" ElType=".P" rngLn="128">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;opstack[]&quot; は初期化する前に使用されている" ln="128" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="39" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-1144613666" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="38" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="616517810" lang="cpp" locEndPos="0" locEndLn="129" goals="0," locStartln="128" sev="1" locRef="3" dumpId="27" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1144613666" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType=".C" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="124" ln="123" srcRngEndPos="0" srcRngStartln="123" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="123">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-273032677" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="125" ln="124" srcRngEndPos="0" srcRngStartln="124" srcRngStartPos="0" desc="if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){" ElType="." rngLn="124">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="-1144613666" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="129" ln="128" srcRngEndPos="0" srcRngStartln="128" srcRngStartPos="0" desc="while(opstack[opindex -1] != '('){" ElType=".P" rngLn="128">
          <Props>
            <Prop key="Tracked variables" val="opstack[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="130" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="-1374891075" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1598069936" lang="cpp" locEndPos="0" locEndLn="131" goals="0," locStartln="130" sev="2" locRef="3" dumpId="28" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1374891075" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="124" ln="123" srcRngEndPos="0" srcRngStartln="123" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="123">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-273032677" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="125" ln="124" srcRngEndPos="0" srcRngStartln="124" srcRngStartPos="0" desc="if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){" ElType="." rngLn="124">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1144613666" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="129" ln="128" srcRngEndPos="0" srcRngStartln="128" srcRngStartPos="0" desc="while(opstack[opindex -1] != '('){" ElType="." rngLn="128">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927754018" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="130" ln="129" srcRngEndPos="0" srcRngStartln="129" srcRngStartPos="0" desc="if(opindex &lt;= 1){" ElType="." rngLn="129">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1374891075" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="131" ln="130" srcRngEndPos="0" srcRngStartln="130" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="130">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="130" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="-1374891075" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-337614195" lang="cpp" locEndPos="0" locEndLn="131" goals="0," locStartln="130" sev="1" locRef="3" dumpId="29" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="-1374891075" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="803201899" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="switch(*(ptr + cnt)){" ElType="." rngLn="43">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1072031702" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="124" ln="123" srcRngEndPos="0" srcRngStartln="123" srcRngStartPos="0" desc="numflg = 0;" ElType="." rngLn="123">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-273032677" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="125" ln="124" srcRngEndPos="0" srcRngStartln="124" srcRngStartPos="0" desc="if (*(ptr + cnt - 1) == '+' || *(ptr + cnt - 1) == '-' || *(ptr + cnt - 1) == '*'|| *(ptr + cnt - 1) == '/'){" ElType="." rngLn="124">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1144613666" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="129" ln="128" srcRngEndPos="0" srcRngStartln="128" srcRngStartPos="0" desc="while(opstack[opindex -1] != '('){" ElType="." rngLn="128">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927754018" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="130" ln="129" srcRngEndPos="0" srcRngStartln="129" srcRngStartPos="0" desc="if(opindex &lt;= 1){" ElType="." rngLn="129">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1374891075" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="131" ln="130" srcRngEndPos="0" srcRngStartln="130" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="130">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="未使用関数の &quot;memset&quot; 戻り値" ln="130" locFile="/calcurator/calculator/src/format.c" locStartln="130" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1374891075" tool="c++test" lineHash="-1374891075" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="1360408807" locEndLn="130" goals="0," />
    <StdViol msg="The argument number '2' ('essentially character' type) is passed to the function 'memset' as a parameter with the 'essentially signed' type" ln="130" locFile="/calcurator/calculator/src/format.c" locStartln="130" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="-1374891075" tool="c++test" lineHash="-1374891075" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="20" locType="sr" hash="1360408807" locEndLn="130" goals="0," />
    <StdViol msg="reversePolish 関数に return 文を 1 つだけ記述する" ln="131" locFile="/calcurator/calculator/src/format.c" locStartln="131" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="872961998" tool="c++test" lineHash="872961998" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="1360408807" locEndLn="131" goals="0," />
    <StdViol msg="終了の break の前に文またはコメントがない" ln="142" locFile="/calcurator/calculator/src/format.c" locStartln="142" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-16_4_b" lnHash="1729845061" tool="c++test" lineHash="1729845061" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="142" goals="0," />
    <StdViol msg="終了の break の前に文またはコメントがない" ln="142" locFile="/calcurator/calculator/src/format.c" locStartln="142" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-16_1_f" lnHash="1729845061" tool="c++test" lineHash="1729845061" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="142" goals="0," />
    <StdViol msg="式に異なる種類の演算子がある場合、括弧を使用する" ln="145" locFile="/calcurator/calculator/src/format.c" locStartln="145" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-12_1_a" lnHash="285923501" tool="c++test" lineHash="285923501" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="15" locType="sr" hash="1360408807" locEndLn="145" goals="0," />
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="146" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-1_3_b" FirstElSrcRngStartPos="0" lnHash="554641670" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1568254221" lang="cpp" locEndPos="0" locEndLn="147" goals="0," locStartln="146" sev="2" locRef="3" dumpId="30" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="554641670" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="285923501" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="146" ln="145" srcRngEndPos="0" srcRngStartln="145" srcRngStartPos="0" desc="if(numcnt != opcnt + 1){" ElType="." rngLn="145">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="554641670" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="147" ln="146" srcRngEndPos="0" srcRngStartln="146" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="146">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="非ゼロ終端文字列が使用されている: &quot;outstr&quot; は初期化されていない" ln="146" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-DIR-4_1_e" FirstElSrcRngStartPos="0" lnHash="554641670" ruleSCSCMsg="非ゼロ終端文字列のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="142988353" lang="cpp" locEndPos="0" locEndLn="147" goals="0," locStartln="146" sev="2" locRef="3" dumpId="31" tool="c++test" lineHash="554641670" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="非ゼロ終端文字列" />
        <Prop key="Important values" val="非ゼロ終端文字列" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="285923501" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="146" ln="145" srcRngEndPos="0" srcRngStartln="145" srcRngStartPos="0" desc="if(numcnt != opcnt + 1){" ElType="." rngLn="145">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="554641670" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="147" ln="146" srcRngEndPos="0" srcRngStartln="146" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="146">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="非ゼロ終端文字列が使用されている: &quot;outstr&quot; は初期化されていない" ln="146" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-21_17_a" FirstElSrcRngStartPos="0" lnHash="554641670" ruleSCSCMsg="非ゼロ終端文字列のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1058805786" lang="cpp" locEndPos="0" locEndLn="147" goals="0," locStartln="146" sev="1" locRef="3" dumpId="32" tool="c++test" lineHash="554641670" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="非ゼロ終端文字列" />
        <Prop key="Important values" val="非ゼロ終端文字列" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="285923501" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="146" ln="145" srcRngEndPos="0" srcRngStartln="145" srcRngStartPos="0" desc="if(numcnt != opcnt + 1){" ElType="." rngLn="145">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="554641670" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="147" ln="146" srcRngEndPos="0" srcRngStartln="146" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="146">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;outstr[]&quot; は初期化する前に使用されている" ln="146" locFile="/calcurator/calculator/src/format.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="175" rule="MISRA2012-RULE-9_1" FirstElSrcRngStartPos="0" lnHash="554641670" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/calcurator/calculator/src/format.c" FirstElSrcRngStartln="174" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="371630288" lang="cpp" locEndPos="0" locEndLn="147" goals="0," locStartln="146" sev="1" locRef="3" dumpId="33" ruleRHMsg="関数への呼び出しが初期化を実行していない可能性がある" tool="c++test" lineHash="554641670" locType="sr" hash="1360408807" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="202451931" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="173" ln="172" srcRngEndPos="0" srcRngStartln="172" srcRngStartPos="0" desc="int errorflg = 0;" ElType="." rngLn="172">
          <Props />
        </ElDesc>
        <ElDesc lineHash="-1154621212" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="174" ln="173" srcRngEndPos="0" srcRngStartln="173" srcRngStartPos="0" desc="int result;" ElType="." rngLn="173">
          <Props />
        </ElDesc>
        <ElDesc lineHash="130915579" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="175" ln="174" srcRngEndPos="0" srcRngStartln="174" srcRngStartPos="0" desc="char repolish[256];" ElType=".C" rngLn="174">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1650761593" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="176" ln="175" srcRngEndPos="0" srcRngStartln="175" srcRngStartPos="0" desc="errorflg = strlenCheck(instr);" ElType="." rngLn="175">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="2062730253" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="177" ln="176" srcRngEndPos="0" srcRngStartln="176" srcRngStartPos="0" desc="if(errorflg){" ElType="." rngLn="176">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="1825351102" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="186" ln="185" srcRngEndPos="0" srcRngStartln="185" srcRngStartPos="0" desc="}else if(formatCheck(instr)){" ElType="." rngLn="185">
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
        <ElDesc lineHash="279499242" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="189" ln="188" srcRngEndPos="0" srcRngStartln="188" srcRngStartPos="0" desc="reversePolish(...)" ElType="!" rngLn="188">
          <ElDescList>
            <ElDesc lineHash="755570204" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char opstack[256];" ElType="." rngLn="38">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1023394153" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int opindex = 0;" ElType="." rngLn="40">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-927949068" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="int cnt = 0,outcnt = 0,numcnt = 0,opcnt = 0,numflg = 0;" ElType="." rngLn="41">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="-1650144184" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="for (cnt = 0; *(ptr + cnt) != '\0'; cnt++) {" ElType="." rngLn="42">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="285923501" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="146" ln="145" srcRngEndPos="0" srcRngStartln="145" srcRngStartPos="0" desc="if(numcnt != opcnt + 1){" ElType="." rngLn="145">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
            <ElDesc lineHash="554641670" locType="sr" srcRnghash="1360408807" locRef="3" srcRngFile="/calcurator/calculator/src/format.c" srcRngEndLn="147" ln="146" srcRngEndPos="0" srcRngStartln="146" srcRngStartPos="0" desc="strlen(...)" ElType=".P" rngLn="146">
              <Props>
                <Prop key="Tracked variables" val="outstr[]" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="repolish[]" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="未使用関数の &quot;memset&quot; 戻り値" ln="146" locFile="/calcurator/calculator/src/format.c" locStartln="146" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="554641670" tool="c++test" lineHash="554641670" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="146" goals="0," />
    <StdViol msg="The argument number '2' ('essentially character' type) is passed to the function 'memset' as a parameter with the 'essentially signed' type" ln="146" locFile="/calcurator/calculator/src/format.c" locStartln="146" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="554641670" tool="c++test" lineHash="554641670" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="17" locType="sr" hash="1360408807" locEndLn="146" goals="0," />
    <StdViol msg="reversePolish 関数に return 文を 1 つだけ記述する" ln="147" locFile="/calcurator/calculator/src/format.c" locStartln="147" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1688062377" tool="c++test" lineHash="-1688062377" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="147" goals="0," />
    <StdViol msg="未使用関数の &quot;memset&quot; 戻り値" ln="151" locFile="/calcurator/calculator/src/format.c" locStartln="151" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1644209178" tool="c++test" lineHash="-1644209178" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="151" goals="0," />
    <StdViol msg="The argument number '2' ('essentially character' type) is passed to the function 'memset' as a parameter with the 'essentially signed' type" ln="151" locFile="/calcurator/calculator/src/format.c" locStartln="151" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-10_3_b" lnHash="-1644209178" tool="c++test" lineHash="-1644209178" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="19" locType="sr" hash="1360408807" locEndLn="151" goals="0," />
    <StdViol msg="reversePolish 関数に return 文を 1 つだけ記述する" ln="152" locFile="/calcurator/calculator/src/format.c" locStartln="152" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="1128022327" tool="c++test" lineHash="1128022327" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="1360408807" locEndLn="152" goals="0," />
    <StdViol msg="reversePolish 関数に return 文を 1 つだけ記述する" ln="164" locFile="/calcurator/calculator/src/format.c" locStartln="164" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1688062501" tool="c++test" lineHash="-1688062501" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="164" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="166" locFile="/calcurator/calculator/src/format.c" locStartln="166" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_4" lnHash="225129764" tool="c++test" lineHash="225129764" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="166" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="172" locFile="/calcurator/calculator/src/format.c" locStartln="172" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="202451931" tool="c++test" lineHash="202451931" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="172" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="173" locFile="/calcurator/calculator/src/format.c" locStartln="173" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1154621212" tool="c++test" lineHash="-1154621212" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="173" goals="0," />
    <StdViol msg="0 との比較テストは明示的に行うべきである" ln="176" locFile="/calcurator/calculator/src/format.c" locStartln="176" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="2062730253" tool="c++test" lineHash="2062730253" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="176" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="178" locFile="/calcurator/calculator/src/format.c" locStartln="178" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1362887994" tool="c++test" lineHash="-1362887994" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="178" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="179" locFile="/calcurator/calculator/src/format.c" locStartln="179" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1251942910" tool="c++test" lineHash="-1251942910" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="179" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="182" locFile="/calcurator/calculator/src/format.c" locStartln="182" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-20985022" tool="c++test" lineHash="-20985022" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="182" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="183" locFile="/calcurator/calculator/src/format.c" locStartln="183" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-155525324" tool="c++test" lineHash="-155525324" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="183" goals="0," />
    <StdViol msg="0 との比較テストは明示的に行うべきである" ln="185" locFile="/calcurator/calculator/src/format.c" locStartln="185" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="1825351102" tool="c++test" lineHash="1825351102" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="185" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="186" locFile="/calcurator/calculator/src/format.c" locStartln="186" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="2137340812" tool="c++test" lineHash="2137340812" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="186" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="187" locFile="/calcurator/calculator/src/format.c" locStartln="187" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="516678635" tool="c++test" lineHash="516678635" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="187" goals="0," />
    <StdViol msg="0 との比較テストは明示的に行うべきである" ln="188" locFile="/calcurator/calculator/src/format.c" locStartln="188" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="279499242" tool="c++test" lineHash="279499242" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="188" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="189" locFile="/calcurator/calculator/src/format.c" locStartln="189" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1568723756" tool="c++test" lineHash="-1568723756" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="189" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="190" locFile="/calcurator/calculator/src/format.c" locStartln="190" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="516678635" tool="c++test" lineHash="516678635" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1360408807" locEndLn="190" goals="0," />
    <StdViol msg="最後の if...else 構造の後に else を置く" ln="191" locFile="/calcurator/calculator/src/format.c" locStartln="191" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_7" lnHash="-1970631969" tool="c++test" lineHash="-1970631969" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="191" goals="0," />
    <StdViol msg="0 との比較テストは明示的に行うべきである" ln="191" locFile="/calcurator/calculator/src/format.c" locStartln="191" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-14_4" lnHash="-1970631969" tool="c++test" lineHash="-1970631969" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="8" locType="sr" hash="1360408807" locEndLn="191" goals="0," />
    <StdViol msg="代入演算子 '=' が誤ったコンテキストで使用されている" ln="191" locFile="/calcurator/calculator/src/format.c" locStartln="191" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-13_4" lnHash="-1970631969" tool="c++test" lineHash="-1970631969" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="11" locType="sr" hash="1360408807" locEndLn="191" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="193" locFile="/calcurator/calculator/src/format.c" locStartln="193" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="1789236801" tool="c++test" lineHash="1789236801" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="193" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="194" locFile="/calcurator/calculator/src/format.c" locStartln="194" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1251942910" tool="c++test" lineHash="-1251942910" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="194" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="196" locFile="/calcurator/calculator/src/format.c" locStartln="196" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-2038360836" tool="c++test" lineHash="-2038360836" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="196" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="197" locFile="/calcurator/calculator/src/format.c" locStartln="197" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1251942910" tool="c++test" lineHash="-1251942910" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="197" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="199" locFile="/calcurator/calculator/src/format.c" locStartln="199" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="300604045" tool="c++test" lineHash="300604045" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="199" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="200" locFile="/calcurator/calculator/src/format.c" locStartln="200" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1251942910" tool="c++test" lineHash="-1251942910" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="200" goals="0," />
    <StdViol msg="未使用関数の &quot;strcpy&quot; 戻り値" ln="202" locFile="/calcurator/calculator/src/format.c" locStartln="202" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1132423129" tool="c++test" lineHash="-1132423129" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="202" goals="0," />
    <StdViol msg="createOutputStatement 関数に return 文を 1 つだけ記述する" ln="203" locFile="/calcurator/calculator/src/format.c" locStartln="203" sev="4" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-15_5" lnHash="-1251942910" tool="c++test" lineHash="-1251942910" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="4" locType="sr" hash="1360408807" locEndLn="203" goals="0," />
    <StdViol msg="printf 関数を使用してはいけない" ln="206" locFile="/calcurator/calculator/src/format.c" locStartln="206" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-2139129572" tool="c++test" lineHash="-2139129572" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="206" goals="0," />
    <StdViol msg="未使用関数の &quot;printf&quot; 戻り値" ln="206" locFile="/calcurator/calculator/src/format.c" locStartln="206" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-2139129572" tool="c++test" lineHash="-2139129572" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="206" goals="0," />
    <StdViol msg="sprintf 関数を使用してはいけない" ln="207" locFile="/calcurator/calculator/src/format.c" locStartln="207" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-405662700" tool="c++test" lineHash="-405662700" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="207" goals="0," />
    <StdViol msg="未使用関数の &quot;sprintf&quot; 戻り値" ln="207" locFile="/calcurator/calculator/src/format.c" locStartln="207" sev="2" auth="fujisawa" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-405662700" tool="c++test" lineHash="-405662700" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="1360408807" locEndLn="207" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="12" locFile="/calcurator/calculator/src/viewer.c" locStartln="12" sev="4" auth="fujisawa" locRef="4" rule="MISRA2012-DIR-4_4" lnHash="-102901257" tool="c++test" lineHash="-102901257" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="12" goals="0," />
    <FlowViol msg="メソッド fgets から返される値をチェックするべきである" ln="13" locFile="/calcurator/calculator/src/viewer.c" ruleSAFMsg="違反 ポイント" FirstElSrcRngEndPos="0" auth="fujisawa" FirstElSrcRngEndLn="14" rule="MISRA2012-DIR-4_7_b" FirstElSrcRngStartPos="0" lnHash="-1550009628" ruleSCSCMsg="メソッド呼び出し" FirstElSrcRngFile="/calcurator/calculator/src/viewer.c" FirstElSrcRngStartln="13" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="182436682" lang="cpp" locEndPos="0" locEndLn="14" goals="0," locStartln="13" sev="2" locRef="4" dumpId="34" tool="c++test" lineHash="-1550009628" locType="sr" hash="-1632907632" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1550009628" locType="sr" srcRnghash="-1632907632" locRef="4" srcRngFile="/calcurator/calculator/src/viewer.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="fgets(str2,256,stdin);" ElType="CP" rngLn="13">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="fgets 関数を使用してはいけない" ln="13" locFile="/calcurator/calculator/src/viewer.c" locStartln="13" sev="2" auth="fujisawa" locRef="4" rule="MISRA2012-RULE-21_6" lnHash="-1550009628" tool="c++test" lineHash="-1550009628" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="13" goals="0," />
    <StdViol msg="未使用関数の &quot;fgets&quot; 戻り値" ln="13" locFile="/calcurator/calculator/src/viewer.c" locStartln="13" sev="2" auth="fujisawa" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1550009628" tool="c++test" lineHash="-1550009628" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="13" goals="0," />
    <StdViol msg="Identifiers given in declaration of 'outputconsole' function (file: 'viewer.h', line: '14') are: 'str2' not: 'str1'" ln="18" locFile="/calcurator/calculator/src/viewer.c" locStartln="18" sev="2" auth="fujisawa" locRef="4" rule="MISRA2012-RULE-8_3_b" lnHash="87612235" tool="c++test" lineHash="87612235" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="-1632907632" locEndLn="18" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="19" locFile="/calcurator/calculator/src/viewer.c" locStartln="19" sev="4" auth="fujisawa" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1786230772" tool="c++test" lineHash="-1786230772" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="19" goals="0," />
    <StdViol msg="関数 outputconsole  の for 文の後にブロックがなければならない" ln="20" locFile="/calcurator/calculator/src/viewer.c" locStartln="20" sev="2" auth="fujisawa" locRef="4" rule="MISRA2012-RULE-15_6_a" lnHash="364063977" tool="c++test" lineHash="364063977" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="20" goals="0," />
    <StdViol msg="printf 関数を使用してはいけない" ln="21" locFile="/calcurator/calculator/src/viewer.c" locStartln="21" sev="2" auth="fujisawa" locRef="4" rule="MISRA2012-RULE-21_6" lnHash="95879889" tool="c++test" lineHash="95879889" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="21" goals="0," />
    <StdViol msg="未使用関数の &quot;printf&quot; 戻り値" ln="21" locFile="/calcurator/calculator/src/viewer.c" locStartln="21" sev="2" auth="fujisawa" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="95879889" tool="c++test" lineHash="95879889" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" hash="-1632907632" locEndLn="21" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="23" locFile="/calcurator/calculator/src/viewer.c" locStartln="23" sev="4" auth="fujisawa" locRef="4" rule="MISRA2012-DIR-4_4" lnHash="1379512912" tool="c++test" lineHash="1379512912" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-1632907632" locEndLn="23" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="14" locFile="/calcurator/calculator/src/calc.h" locStartln="14" sev="4" auth="fujisawa" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-659175199" tool="c++test" lineHash="-659175199" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-1046831345" locEndLn="14" goals="0," />
    <StdViol msg="引数には名前がなければならない" ln="14" locFile="/calcurator/calculator/src/calc.h" locStartln="14" sev="2" auth="fujisawa" locRef="5" rule="MISRA2012-RULE-8_2_a" lnHash="-659175199" tool="c++test" lineHash="-659175199" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-1046831345" locEndLn="14" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="14" locFile="/calcurator/calculator/src/calc.h" locStartln="14" sev="4" auth="fujisawa" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-659175199" tool="c++test" lineHash="-659175199" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="17" locType="sr" hash="-1046831345" locEndLn="14" goals="0," />
    <StdViol msg="#include 指令の後に空白以外の文字があってはならない" ln="10" locFile="/calcurator/calculator/src/viewer.h" locStartln="10" sev="2" auth="fujisawa" locRef="6" rule="MISRA2012-RULE-20_13" lnHash="1107573010" tool="c++test" lineHash="1107573010" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="9282268" locEndLn="10" goals="0," />
    <StdViol msg="#include 指令の後に空白以外の文字があってはならない" ln="11" locFile="/calcurator/calculator/src/viewer.h" locStartln="11" sev="2" auth="fujisawa" locRef="6" rule="MISRA2012-RULE-20_13" lnHash="56866027" tool="c++test" lineHash="56866027" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="9282268" locEndLn="11" goals="0," />
    <StdViol msg="引数には名前がなければならない" ln="13" locFile="/calcurator/calculator/src/viewer.h" locStartln="13" sev="2" auth="fujisawa" locRef="6" rule="MISRA2012-RULE-8_2_a" lnHash="-811028991" tool="c++test" lineHash="-811028991" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="9282268" locEndLn="13" goals="1," />
    <StdViol msg="#include 指令の後に空白以外の文字があってはならない" ln="10" locFile="/calcurator/calculator/src/format.h" locStartln="10" sev="2" auth="fujisawa" locRef="7" rule="MISRA2012-RULE-20_13" lnHash="1107573010" tool="c++test" lineHash="1107573010" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-2008126451" locEndLn="10" goals="0," />
    <StdViol msg="#include 指令の後に空白以外の文字があってはならない" ln="11" locFile="/calcurator/calculator/src/format.h" locStartln="11" sev="2" auth="fujisawa" locRef="7" rule="MISRA2012-RULE-20_13" lnHash="-484105220" tool="c++test" lineHash="-484105220" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-2008126451" locEndLn="11" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="14" locFile="/calcurator/calculator/src/format.h" locStartln="14" sev="4" auth="fujisawa" locRef="7" rule="MISRA2012-DIR-4_6_b" lnHash="1789945383" tool="c++test" lineHash="1789945383" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-2008126451" locEndLn="14" goals="0," />
    <StdViol msg="引数には名前がなければならない" ln="14" locFile="/calcurator/calculator/src/format.h" locStartln="14" sev="2" auth="fujisawa" locRef="7" rule="MISRA2012-RULE-8_2_a" lnHash="1789945383" tool="c++test" lineHash="1789945383" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-2008126451" locEndLn="14" goals="1," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="15" locFile="/calcurator/calculator/src/format.h" locStartln="15" sev="4" auth="fujisawa" locRef="7" rule="MISRA2012-DIR-4_6_b" lnHash="-2002026854" tool="c++test" lineHash="-2002026854" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-2008126451" locEndLn="15" goals="0," />
    <StdViol msg="引数には名前がなければならない" ln="15" locFile="/calcurator/calculator/src/format.h" locStartln="15" sev="2" auth="fujisawa" locRef="7" rule="MISRA2012-RULE-8_2_a" lnHash="-2002026854" tool="c++test" lineHash="-2002026854" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="-2008126451" locEndLn="15" goals="0," />
    <StdViol msg="基本数値型 int を使用するべきではない" ln="16" locFile="/calcurator/calculator/src/format.h" locStartln="16" sev="4" auth="fujisawa" locRef="7" rule="MISRA2012-DIR-4_6_b" lnHash="-702827984" tool="c++test" lineHash="-702827984" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="1" locType="sr" hash="-2008126451" locEndLn="16" goals="0," />
    <StdViol msg="引数には名前がなければならない" ln="16" locFile="/calcurator/calculator/src/format.h" locStartln="16" sev="2" auth="fujisawa" locRef="7" rule="MISRA2012-RULE-8_2_a" lnHash="-702827984" tool="c++test" lineHash="-702827984" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="-2008126451" locEndLn="16" goals="0," />
    <StdViol msg="引数には名前がなければならない" ln="17" locFile="/calcurator/calculator/src/format.h" locStartln="17" sev="2" auth="fujisawa" locRef="7" rule="MISRA2012-RULE-8_2_a" lnHash="1940413308" tool="c++test" lineHash="1940413308" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="-2008126451" locEndLn="17" goals="0," />
  </StdViols>

      <TestedFilesDetails>
         <Total name="合計 (抑制された)" supp="0" total="244">
            <Project name="calcurator" supp="0" total="244">
               <Res name="calculator" supp="0" total="244">
                  <Res name="src" supp="0" total="244">
                     <Res loc="/calcurator/calculator/src/calc.c" locRef="1" locType="sr" name="calc.c" supp="0" total="61" />
                     <Res loc="/calcurator/calculator/src/calculator.c" locRef="2" locType="sr" name="calculator.c" supp="0" total="4" />
                     <Res loc="/calcurator/calculator/src/format.c" locRef="3" locType="sr" name="format.c" supp="0" total="154" />
                     <Res loc="/calcurator/calculator/src/viewer.c" locRef="4" locType="sr" name="viewer.c" supp="0" total="10" />
                     <Res loc="/calcurator/calculator/src/calc.h" locRef="5" locType="sr" name="calc.h" supp="0" total="3" />
                     <Res loc="/calcurator/calculator/src/viewer.h" locRef="6" locType="sr" name="viewer.h" supp="0" total="3" />
                     <Res loc="/calcurator/calculator/src/format.h" locRef="7" locType="sr" name="format.h" supp="0" total="9" />
                  </Res>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
