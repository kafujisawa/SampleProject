<?xml version="1.0" encoding="UTF-8"?>
<Symbols version="2.0">
    <TranslationUnitId>2784991154_932_3990736125</TranslationUnitId>
    <HasCoverageInfo>true</HasCoverageInfo>
    <File name="C:\Program Files (x86)\Jenkins\workspace\gitSample\SampleProject\calcurator\calculator\src\format.c" id="1"/>
    <File name="C:\Program Files (x86)\Jenkins\workspace\gitSample\SampleProject\calcurator\tests\autogenerated\calculator\src\format.c\TestSuite_createOutputStatement.c" id="2"/>
    <File name="C:\Program Files (x86)\Jenkins\workspace\gitSample\SampleProject\calcurator\tests\autogenerated\calculator\src\format.c\TestSuite_formatCheck.c" id="3"/>
    <File name="C:\Program Files (x86)\Jenkins\workspace\gitSample\SampleProject\calcurator\tests\autogenerated\calculator\src\format.c\TestSuite_reversePolish.c" id="4"/>
    <File name="C:\Program Files (x86)\Jenkins\workspace\gitSample\SampleProject\calcurator\tests\autogenerated\calculator\src\format.c\TestSuite_strlenCheck.c" id="5"/>
    <Function id="printf" name="ZGprintfX" decorated_name="int printf(const char *, ...)" sorted_name="printf" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_printf (const char * _MT_var6, ...) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) printf (const char * _MT_var60, ...) </orig_declaration>
         <trigger_name>printf</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;printf&quot;)-&gt;WithRefArg(&quot;_MT_var6&quot;, &amp;_MT_var6, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;printf&quot;)-&gt;WithRefArg(&quot;_MT_var6&quot;, &amp;_MT_var6, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
    </Function>
    <Function id="sprintf" name="ZHsprintfX" decorated_name="int sprintf(char *, const char *, ...)" sorted_name="sprintf" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_sprintf (char * _MT_var56, const char * _MT_var57, ...) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) sprintf (char * _MT_var61, const char * _MT_var62, ...) </orig_declaration>
         <trigger_name>sprintf</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;sprintf&quot;)-&gt;WithRefArg(&quot;_MT_var56&quot;, &amp;_MT_var56, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var57&quot;, &amp;_MT_var57, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;sprintf&quot;)-&gt;WithRefArg(&quot;_MT_var56&quot;, &amp;_MT_var56, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var57&quot;, &amp;_MT_var57, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
    </Function>
    <Function id="memset" name="ZGmemsetX" decorated_name="void * memset(void *, int, size_t)" sorted_name="memset" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void * __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_memset (void * _MT_var14, int _MT_var15, size_t _MT_var16) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void * __attribute__((__cdecl__)) memset (void * _MT_var63, int _MT_var64, size_t _MT_var65) </orig_declaration>
         <trigger_name>memset</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;memset&quot;)-&gt;WithRefArg(&quot;_MT_var14&quot;, &amp;_MT_var14, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;_MT_var15&quot;, &amp;_MT_var15, tgr_int_type())-&gt;WithRefArg(&quot;_MT_var16&quot;, &amp;_MT_var16, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;memset&quot;)-&gt;WithRefArg(&quot;_MT_var14&quot;, &amp;_MT_var14, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;_MT_var15&quot;, &amp;_MT_var15, tgr_int_type())-&gt;WithRefArg(&quot;_MT_var16&quot;, &amp;_MT_var16, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>memset(_MT_var14, _MT_var15, _MT_var16)</orig_call>
         <return_var_decl>void * __return</return_var_decl>
         <return_expression>_MT_var14</return_expression>
         <system_decl_header>string.h</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="strcpy" name="ZGstrcpyX" decorated_name="char * strcpy(char *, const char *)" sorted_name="strcpy" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE char * __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_strcpy (char * _MT_var28, const char * _MT_var29) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE char * __attribute__((__cdecl__)) strcpy (char * _MT_var66, const char * _MT_var67) </orig_declaration>
         <trigger_name>strcpy</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;strcpy&quot;)-&gt;WithRefArg(&quot;_MT_var28&quot;, &amp;_MT_var28, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var29&quot;, &amp;_MT_var29, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;strcpy&quot;)-&gt;WithRefArg(&quot;_MT_var28&quot;, &amp;_MT_var28, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var29&quot;, &amp;_MT_var29, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_char_type()))-&gt;End()</post_trigger_call>
         <orig_call>strcpy(_MT_var28, _MT_var29)</orig_call>
         <return_var_decl>char * __return</return_var_decl>
         <return_expression>_MT_var28</return_expression>
      </stub_declaration>
    </Function>
    <Function id="strlen" name="ZGstrlenX" decorated_name="size_t strlen(const char *)" sorted_name="strlen" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE size_t __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_strlen (const char * _MT_var2) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE size_t __attribute__((__cdecl__)) strlen (const char * _MT_var68) </orig_declaration>
         <trigger_name>strlen</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;strlen&quot;)-&gt;WithRefArg(&quot;_MT_var2&quot;, &amp;_MT_var2, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_uint_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;strlen&quot;)-&gt;WithRefArg(&quot;_MT_var2&quot;, &amp;_MT_var2, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_uint_type())-&gt;End()</post_trigger_call>
         <orig_call>strlen(_MT_var2)</orig_call>
         <return_var_decl>size_t __return</return_var_decl>
         <return_expression>0U</return_expression>
         <system_decl_header>string.h</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="calc" name="ZEcalcX" decorated_name="int calc(char *, int *)" sorted_name="calc" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int </declaration_prefix>
         <declaration_suffix>_Stub_calc (char * _MT_var48, int * _MT_var49) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int calc (char * _MT_var69, int * _MT_var70) </orig_declaration>
         <trigger_name>calc</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;calc&quot;)-&gt;WithRefArg(&quot;_MT_var48&quot;, &amp;_MT_var48, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var49&quot;, &amp;_MT_var49, tgr_ptr_type(tgr_int_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;calc&quot;)-&gt;WithRefArg(&quot;_MT_var48&quot;, &amp;_MT_var48, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var49&quot;, &amp;_MT_var49, tgr_ptr_type(tgr_int_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>calc(_MT_var48, _MT_var49)</orig_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
    </Function>
    <Function id="strlenCheck" name="ZLstrlenCheckX" decorated_name="int strlenCheck(char *)" sorted_name="strlenCheck" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int </declaration_prefix>
         <declaration_suffix>_Stub_strlenCheck (char * instr) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int strlenCheck (char * instr) </orig_declaration>
         <trigger_name>strlenCheck</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;strlenCheck&quot;)-&gt;WithRefArg(&quot;instr&quot;, &amp;instr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;strlenCheck&quot;)-&gt;WithRefArg(&quot;instr&quot;, &amp;instr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>strlenCheck(instr)</orig_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="9" col="5"/>
    </Function>
    <Function id="formatCheck" name="ZLformatCheckX" decorated_name="int formatCheck(char *)" sorted_name="formatCheck" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int </declaration_prefix>
         <declaration_suffix>_Stub_formatCheck (char * instr) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int formatCheck (char * instr) </orig_declaration>
         <trigger_name>formatCheck</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;formatCheck&quot;)-&gt;WithRefArg(&quot;instr&quot;, &amp;instr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;formatCheck&quot;)-&gt;WithRefArg(&quot;instr&quot;, &amp;instr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>formatCheck(instr)</orig_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="21" col="5"/>
    </Function>
    <Function id="reversePolish" name="ZNreversePolishX" decorated_name="int reversePolish(char *, char *)" sorted_name="reversePolish" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int </declaration_prefix>
         <declaration_suffix>_Stub_reversePolish (char * ptr, char  outstr[256]) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int reversePolish (char * ptr, char  outstr[256]) </orig_declaration>
         <trigger_name>reversePolish</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;reversePolish&quot;)-&gt;WithRefArg(&quot;ptr&quot;, &amp;ptr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;outstr&quot;, &amp;outstr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;reversePolish&quot;)-&gt;WithRefArg(&quot;ptr&quot;, &amp;ptr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;outstr&quot;, &amp;outstr, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>reversePolish(ptr, outstr)</orig_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="37" col="5"/>
    </Function>
    <Function id="createOutputStatement" name="ZbFcreateOutputStatementX" decorated_name="void createOutputStatement(char *, char *)" sorted_name="createOutputStatement">
      <definition type="orig" source="code" file_id="1" line="170" col="6"/>
    </Function>
    <Function id="TestSuite_createOutputStatement_e83a4da1_testSuiteBegin" name="ZdHTestSuite_createOutputStatement_e83a4da1_testSuiteBeginX" decorated_name="void TestSuite_createOutputStatement_e83a4da1_testSuiteBegin(void)" sorted_name="TestSuite_createOutputStatement_e83a4da1_testSuiteBegin">
      <definition type="orig" source="code" file_id="2" line="9" col="475"/>
    </Function>
    <Function id="TestSuite_createOutputStatement_e83a4da1_callTest" name="ZdBTestSuite_createOutputStatement_e83a4da1_callTestX" decorated_name="int TestSuite_createOutputStatement_e83a4da1_callTest(const char *)" sorted_name="TestSuite_createOutputStatement_e83a4da1_callTest">
      <definition type="orig" source="code" file_id="2" line="17" col="6"/>
    </Function>
    <Function id="TestSuite_createOutputStatement_e83a4da1_setUp" name="ZcOTestSuite_createOutputStatement_e83a4da1_setUpX" decorated_name="void TestSuite_createOutputStatement_e83a4da1_setUp(void)" sorted_name="TestSuite_createOutputStatement_e83a4da1_setUp">
      <definition type="orig" source="code" file_id="2" line="20" col="6"/>
    </Function>
    <Function id="TestSuite_createOutputStatement_e83a4da1_tearDown" name="ZdBTestSuite_createOutputStatement_e83a4da1_tearDownX" decorated_name="void TestSuite_createOutputStatement_e83a4da1_tearDown(void)" sorted_name="TestSuite_createOutputStatement_e83a4da1_tearDown">
      <definition type="orig" source="code" file_id="2" line="25" col="6"/>
    </Function>
    <Function id="TestSuite_createOutputStatement_e83a4da1_test_createPutputStatement" name="ZeDTestSuite_createOutputStatement_e83a4da1_test_createPutputStatementX" decorated_name="void TestSuite_createOutputStatement_e83a4da1_test_createPutputStatement(void)" sorted_name="TestSuite_createOutputStatement_e83a4da1_test_createPutputStatement">
      <definition type="orig" source="code" file_id="2" line="32" col="6"/>
    </Function>
    <Function id="TestSuite_createOutputStatement_e83a4da1_test_case" name="ZdCTestSuite_createOutputStatement_e83a4da1_test_caseX" decorated_name="void TestSuite_createOutputStatement_e83a4da1_test_case(void)" sorted_name="TestSuite_createOutputStatement_e83a4da1_test_case">
      <definition type="orig" source="code" file_id="2" line="183" col="6"/>
    </Function>
    <Function id="TestSuite_formatCheck_3f15dc1c_testSuiteBegin" name="ZcNTestSuite_formatCheck_3f15dc1c_testSuiteBeginX" decorated_name="void TestSuite_formatCheck_3f15dc1c_testSuiteBegin(void)" sorted_name="TestSuite_formatCheck_3f15dc1c_testSuiteBegin">
      <definition type="orig" source="code" file_id="3" line="9" col="405"/>
    </Function>
    <Function id="TestSuite_formatCheck_3f15dc1c_callTest" name="ZcHTestSuite_formatCheck_3f15dc1c_callTestX" decorated_name="int TestSuite_formatCheck_3f15dc1c_callTest(const char *)" sorted_name="TestSuite_formatCheck_3f15dc1c_callTest">
      <definition type="orig" source="code" file_id="3" line="15" col="6"/>
    </Function>
    <Function id="TestSuite_formatCheck_3f15dc1c_setUp" name="ZcETestSuite_formatCheck_3f15dc1c_setUpX" decorated_name="void TestSuite_formatCheck_3f15dc1c_setUp(void)" sorted_name="TestSuite_formatCheck_3f15dc1c_setUp">
      <definition type="orig" source="code" file_id="3" line="18" col="6"/>
    </Function>
    <Function id="TestSuite_formatCheck_3f15dc1c_tearDown" name="ZcHTestSuite_formatCheck_3f15dc1c_tearDownX" decorated_name="void TestSuite_formatCheck_3f15dc1c_tearDown(void)" sorted_name="TestSuite_formatCheck_3f15dc1c_tearDown">
      <definition type="orig" source="code" file_id="3" line="23" col="6"/>
    </Function>
    <Function id="TestSuite_formatCheck_3f15dc1c_test_formatCheck" name="ZcPTestSuite_formatCheck_3f15dc1c_test_formatCheckX" decorated_name="void TestSuite_formatCheck_3f15dc1c_test_formatCheck(void)" sorted_name="TestSuite_formatCheck_3f15dc1c_test_formatCheck">
      <definition type="orig" source="code" file_id="3" line="30" col="6"/>
    </Function>
    <Function id="TestSuite_reversePolish_d77acb91_testSuiteBegin" name="ZcPTestSuite_reversePolish_d77acb91_testSuiteBeginX" decorated_name="void TestSuite_reversePolish_d77acb91_testSuiteBegin(void)" sorted_name="TestSuite_reversePolish_d77acb91_testSuiteBegin">
      <definition type="orig" source="code" file_id="4" line="9" col="419"/>
    </Function>
    <Function id="TestSuite_reversePolish_d77acb91_callTest" name="ZcJTestSuite_reversePolish_d77acb91_callTestX" decorated_name="int TestSuite_reversePolish_d77acb91_callTest(const char *)" sorted_name="TestSuite_reversePolish_d77acb91_callTest">
      <definition type="orig" source="code" file_id="4" line="15" col="6"/>
    </Function>
    <Function id="TestSuite_reversePolish_d77acb91_setUp" name="ZcGTestSuite_reversePolish_d77acb91_setUpX" decorated_name="void TestSuite_reversePolish_d77acb91_setUp(void)" sorted_name="TestSuite_reversePolish_d77acb91_setUp">
      <definition type="orig" source="code" file_id="4" line="18" col="6"/>
    </Function>
    <Function id="TestSuite_reversePolish_d77acb91_tearDown" name="ZcJTestSuite_reversePolish_d77acb91_tearDownX" decorated_name="void TestSuite_reversePolish_d77acb91_tearDown(void)" sorted_name="TestSuite_reversePolish_d77acb91_tearDown">
      <definition type="orig" source="code" file_id="4" line="23" col="6"/>
    </Function>
    <Function id="TestSuite_reversePolish_d77acb91_test_reversePolish" name="ZdDTestSuite_reversePolish_d77acb91_test_reversePolishX" decorated_name="void TestSuite_reversePolish_d77acb91_test_reversePolish(void)" sorted_name="TestSuite_reversePolish_d77acb91_test_reversePolish">
      <definition type="orig" source="code" file_id="4" line="30" col="6"/>
    </Function>
    <Function id="TestSuite_strlenCheck_27fca8b6_testSuiteBegin" name="ZcNTestSuite_strlenCheck_27fca8b6_testSuiteBeginX" decorated_name="void TestSuite_strlenCheck_27fca8b6_testSuiteBegin(void)" sorted_name="TestSuite_strlenCheck_27fca8b6_testSuiteBegin">
      <definition type="orig" source="code" file_id="5" line="9" col="405"/>
    </Function>
    <Function id="TestSuite_strlenCheck_27fca8b6_callTest" name="ZcHTestSuite_strlenCheck_27fca8b6_callTestX" decorated_name="int TestSuite_strlenCheck_27fca8b6_callTest(const char *)" sorted_name="TestSuite_strlenCheck_27fca8b6_callTest">
      <definition type="orig" source="code" file_id="5" line="15" col="6"/>
    </Function>
    <Function id="TestSuite_strlenCheck_27fca8b6_setUp" name="ZcETestSuite_strlenCheck_27fca8b6_setUpX" decorated_name="void TestSuite_strlenCheck_27fca8b6_setUp(void)" sorted_name="TestSuite_strlenCheck_27fca8b6_setUp">
      <definition type="orig" source="code" file_id="5" line="18" col="6"/>
    </Function>
    <Function id="TestSuite_strlenCheck_27fca8b6_tearDown" name="ZcHTestSuite_strlenCheck_27fca8b6_tearDownX" decorated_name="void TestSuite_strlenCheck_27fca8b6_tearDown(void)" sorted_name="TestSuite_strlenCheck_27fca8b6_tearDown">
      <definition type="orig" source="code" file_id="5" line="23" col="6"/>
    </Function>
    <Function id="TestSuite_strlenCheck_27fca8b6_test_strlenCheck" name="ZcPTestSuite_strlenCheck_27fca8b6_test_strlenCheckX" decorated_name="void TestSuite_strlenCheck_27fca8b6_test_strlenCheck(void)" sorted_name="TestSuite_strlenCheck_27fca8b6_test_strlenCheck">
      <definition type="orig" source="code" file_id="5" line="30" col="6"/>
    </Function>
</Symbols>

